{"version":3,"sources":["constants/colours.ts","constants/game.ts","constants/text.ts","game/loaders/ImageLoader.ts","menu/displayer.ts","menu/constants.ts","menu/handleCommand.ts","constants/alphabet.ts","menu/handleInput.ts","game/scene/Menu.ts","game/Background.ts","game/Movement.ts","game/loaders/AnimationLoader.ts","game/entities/Entity.ts","game/entities/helpers/BodyCreator.ts","game/utils/words.ts","game/utils/Random.ts","game/loaders/SoundLoader.ts","game/utils/animationPlayer.ts","game/mode/binding/Binding.ts","game/VimBoy.ts","game/mode/Mode.ts","constants/verbsAndNouns.ts","game/mode/action/EnterInsertMode.ts","game/mode/action/MoveDown.ts","game/mode/action/MoveUp.ts","game/mode/action/MoveLeft.ts","game/mode/action/MoveRight.ts","game/mode/action/MoveToTop.ts","game/mode/action/MoveToBottom.ts","game/mode/action/EnterCommandMode.ts","game/mode/action/JumpBackParagraph.ts","game/mode/action/DeleteLine.ts","game/mode/action/DeleteWord.ts","game/mode/binding/normalModeBindings.ts","game/mode/NormalMode.ts","game/mode/action/EnterNormalMode.ts","game/entities/helpers/TextCreator.ts","game/entities/nonEnemies/WordAttack.ts","game/mode/InsertMode.ts","game/mode/CommandMode.ts","game/ModeManager.ts","game/StatusLine.ts","game/ScoreBoard.ts","game/Health.ts","game/entities/enemies/WordTypeEnemy.ts","game/entities/pickups/EntityPickup.ts","game/entities/EntityManager.ts","game/PowerUpManager.ts","game/MusicManager.ts","game/tutorial/tutorialUtils.ts","game/tutorial/tutorialSteps.ts","game/tutorial/Tutorial.ts","game/tutorial/TutorialManager.ts","game/scene/PlayScene.ts","game/scene/End.ts","game/Game.ts"],"names":["StringColours","Colours","CELL_SIZE","GAME_WIDTH","GAME_HEIGHT","GAME_START_X","PLAY_ZONE_HEIGHT","BOTTOM_BAR_Y","GAP_COUNT","Images","FONT_SIZE","FONT","FONT_CONFIG","fontFamily","fontSize","cursorX","text","x","width","historyX","helpString","helpControlsString","instructions","printResponse","menu","command","response","clearHistory","addHistory","forEach","r","playWords","alphabet","whitelist","handleInput","keyEvent","key","handleEnter","handleDelete","handleHistoryLoop","history","length","includes","toLowerCase","currentLine","slice","lineText","setText","cursor","setX","modifier","initialiser","reverse","entry","historyPosition","undefined","scene","start","window","tutorialMode","moveDownALine","handleCommand","sceneConfig","active","visible","Menu","header","preamble","historyObj","onLoaded","add","group","color","PINK","YELLOW","rectangle","WHITE","tweens","targets","alpha","from","to","ease","duration","repeat","yoyo","input","keyboard","on","y","getChildren","setY","loadingText","this","rect","setFillStyle","BLACK","setDepth","WebFont","load","google","families","destroy","clear","item","push","Phaser","Scene","Background","graphics","step","Geom","Rectangle","fillStyle","DARKER_GREEN","DARK_GREEN","fillRectShape","toString","align","fixedWidth","setAlpha","Movement","update","vimboy","bottomLine","clamp","num","min","max","playDown","playUp","line","lineNo","playPop","n","jumpToLine","Animations","HEART_FRAME","POWER_UP_FOUND_FRAME","preloadImages","spritesheet","VIMBOY","frameWidth","frameHeight","image","POWER_UP_CONTAINER","GHOST","TROPHY","EntityType","createFrameConfig","frameStart","frameCount","frames","anims","generateFrameNumbers","Array","keys","map","k","frameRate","enableBody","obj","physics","world","body","setAllowGravity","setVelocity","xVelocity","setAllowRotation","setVelocityX","timeScale","words","Random","Math","round","floor","random","ceil","index","getNumber","anEnum","enumValues","Object","Number","parseInt","filter","isNaN","values","colours","stringColours","RED","BLUE","GREEN","randomBool","Sound","playClashAnimation","sprite","setTint","getColour","setFrame","play","CLASH","time","addEvent","delay","callback","BindingType","url","name","preloadSounds","audio","MUSIC","BAD","DEATH","GOOD","BOOP","GOOD_SCORE","VimBoy","movement","bulletProof","create","changeColour","LIGHT_GREEN","isPlaying","VIMBOY_BOB","onEnemyCollision","player","enemy","entityManager","destroyEnemy","health","injure","modeManager","getCurrentColour","setBulletProof","onPickupCollision","pickup","pickupEntity","getData","type","PICKUP","sound","destroyNonEnemy","powerUpManager","addPowerUp","colour","playWordAttack","VIMBOY_WORD_ATTACK","VIMBOY_UP","VIMBOY_DOWN","VIMBOY_POP","lineNumber","getLineNumber","jumpBackNLines","Mode","display","Verb","Noun","d","w","EnterInsertMode","switchToInsert","MoveDown","downALine","MoveUp","upALine","MoveLeft","moveEverythingRight","MoveRight","moveEverythingLeft","MoveToTop","MoveToBottom","EnterCommandMode","switchToCommand","JumpBackParagraph","jumpableLines","getEnemies","sort","idx","DeleteLine","word","getFirstWordOnLine","scoreBoard","updateScore","DeleteWord","data","newWords","newData","setData","join","bindings","action","NORMAL","verb","noun","verbs","NormalMode","useBinding","binding","handlePickup","act","hasVerb","setNounIfAvailable","canUsePowerUp","use","unusedClear","concat","normalModeBindings","find","b","some","setVerbIfAvailable","EnterNormalMode","switchToNormal","createText","setColor","createWordAttack","letter","velocity","getStringColour","entity","WORD_ATTACK","normalVelocity","InsertMode","createNonEnemy","CommandMode","handleStringCommands","str","stopAll","console","log","ModeManager","mode","allowedKeys","Set","allowedKeysMode","listen","keyCapturer","addListener","has","handle","setGlobalTimeScale","allow","allowNone","allowAll","setMode","LIGHT_BLUE","matchToTimescale","StatusLine","modeText","commandText","initBackground","initMode","initCommandText","modeString","renderCommand","hideCommand","getCommand","ScoreBoard","score","points","getTextXPosition","resetScore","Health","lifes","images","renderImages","i","life","numberOfGaps","createWordTypeEnemy","getWords","lineHasEnemy","WORD_TYPE_ENEMY","onCollision","gameObject","attackObject","enemyText","trim","enemyTextFirstChar","charAt","substr","createPickup","getNonEnemyOnLine","EntityManager","enemies","nonEnemies","generationPaused","overlap","nonEnemy","enemyEntity","nonEnemyEntity","lineHasNonEnemy","getOnLine","children","each","c","cleanup","remove","applyToAll","_","getGlobalTimeScale","cb","creator","generate","randomNumber","createEnemy","PowerUpManager","nouns","selectedVerb","selectedNoun","presetVerb","presetNoun","randomStringEnum","drawPowerUp","list","thing","shift","powerUp","spriteY","label","labelY","textConfig","refreshGroupPositioning","getFromGroup","clearUsedSelected","selected","clearUnusedSelected","findThingIndex","findIndex","g","updateX","spritePositionX","addLabel","hasVerbs","hasNouns","useItemAndCreateSelected","splice","object","playTextFlash","MusicManager","music","loop","volume","generatePresent","getRandomInt","generateEnemy","printWord","genericInputUpdater","updateInput","printText","steps","keysToEnable","shouldRunNextStep","onUpdate","onNonKeyMatch","v","match","extra","Tutorial","endTutorial","funToRun","runNext","previousBoundFn","unbind","handleKeybind","nextOrEnd","onKeyDown","destroyAll","removeListener","pauseRandomGeneration","TutorialManager","tutorial","onComplete","PlayScene","statusLine","musicManager","tutorialManager","init","addCapture","Input","Keyboard","KeyCodes","I","drawBackground","game","End","replayButton","menuButton","replaySelected","renderImage","imageStr","tweenImage","renderText","textStartY","config","AUTO","height","default","arcade","gravity","Game"],"mappings":"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","file":"static/js/main.333001a2.chunk.js","sourcesContent":["export enum StringColours {\r\n  GREEN = \"#62b37d\",\r\n  BLUE = \"#23549b\",\r\n  BEIGE = \"#b39862\",\r\n  PINK = \"#ff5eaf\",\r\n  RED = \"#f74a5e\",\r\n  YELLOW = \"#ffea5e\",\r\n  GREY = \"#3e3e3e\",\r\n  WHITE = \"#ffffff\"\r\n}\r\n\r\nexport enum Colours {\r\n  BLACK = 0x000000,\r\n  LIGHT_GREEN = 0x4ee54e,\r\n  GREEN = 0x62b37d,\r\n  BLUE = 0x23549b,\r\n  LIGHT_BLUE = 0x00d6ff,\r\n  WHITE = 0xffffff,\r\n  BEIGE = 0xb39862,\r\n  DARK_GREEN = 0x072c07,\r\n  DARKER_GREEN = 0x062606,\r\n  RED = 0xf74a5e,\r\n  YELLOW = 0xffea5e,\r\n  PINK = 0xff5eaf,\r\n  GREY = 0x3e3e3e\r\n}\r\n","export const CELL_SIZE = 40;\r\n\r\nexport const GAME_WIDTH = 800;\r\nexport const GAME_HEIGHT = 640;\r\n\r\nexport const GAME_START_X = CELL_SIZE;\r\n\r\nexport const BOTTOM_BAR_HEIGHT = CELL_SIZE * 3;\r\n\r\nexport const PLAY_ZONE_HEIGHT = GAME_HEIGHT - BOTTOM_BAR_HEIGHT;\r\n\r\nexport const BOTTOM_BAR_Y = PLAY_ZONE_HEIGHT;\r\n\r\nexport const GAP_COUNT = PLAY_ZONE_HEIGHT / CELL_SIZE;\r\n","import { CELL_SIZE } from \"./game\";\r\n\r\nexport const FONT_SIZE = CELL_SIZE;\r\nexport const FONT = '\"VT323\"';\r\n\r\nexport const FONT_CONFIG = {\r\n    fontFamily: FONT,\r\n    fontSize: FONT_SIZE\r\n}","import { CELL_SIZE } from \"../../constants/game\";\r\n\r\nexport enum Images {\r\n  VIMBOY = \"vimboy\",\r\n  POWER_UP_CONTAINER = \"POWER_UP_CONTAINER\",\r\n  GHOST = \"GHOST\",\r\n  TROPHY = \"TROPHY\"\r\n}\r\n\r\nexport const CLASH_START_FRAME = 10;\r\nexport const CLASH_FRAME_COUNT = 3;\r\nexport const HEART_FRAME = 15;\r\nexport const PRESENT_FRAME = 13;\r\nexport const POWER_UP_FOUND_FRAME = 14;\r\n\r\nconst preloadImages = () => {\r\n  window.scene.load.spritesheet(\r\n    Images.VIMBOY,\r\n    \"https://i.imgur.com/ND67D6J.png\",\r\n    { frameWidth: 50, frameHeight: CELL_SIZE }\r\n  );\r\n\r\n  window.scene.load.image(\r\n    Images.POWER_UP_CONTAINER,\r\n    \"https://i.imgur.com/terj3t4.png\"\r\n  );\r\n\r\n  window.scene.load.image(Images.GHOST, \"https://i.imgur.com/4gnVJiV.png\");\r\n  window.scene.load.image(Images.TROPHY, \"https://i.imgur.com/O5dS6aL.png\");\r\n};\r\n\r\nexport default preloadImages;\r\n","import { CELL_SIZE } from \"../constants/game\";\r\nimport { PADDING } from \"./constants\";\r\nimport { GameObjects } from \"phaser\";\r\n\r\nexport const cursorX = (text: GameObjects.Text) => text.x + text.width + 3;\r\nexport const preambleX = (x: number) => x + CELL_SIZE;\r\nexport const historyX = CELL_SIZE + PADDING;\r\n","export const PADDING = 18;\r\n","import { Menu } from \"../game/scene/Menu\";\r\n\r\nconst helpString = [\r\n  \"To play: vim\",\r\n  \"To play tutorial: tutorial\",\r\n  \"\",\r\n  \"help <term>   search for help on <term>\",\r\n  \"where <term> is one of: controls, gameplay\"\r\n];\r\n\r\nconst helpControlsString = [\"movement:\", \"    k\", \"h        l\", \"    j\"];\r\n\r\nconst instructions = [\"how to play:\", \"TODO\"];\r\n\r\nconst printResponse = (menu: Menu, command: string, response: string[]) => {\r\n  menu.clearHistory();\r\n  menu.addHistory(command);\r\n  response.forEach(r => menu.addHistory(r));\r\n};\r\n\r\nconst playWords = [\"play\", \"vim\", \"vi\", \"vimboy\"];\r\nexport const handleCommand = (menu: Menu, command: string) => {\r\n  if (playWords.includes(command)) {\r\n    return menu.scene.start(\"Game\");\r\n  }\r\n  menu.addHistory(command);\r\n\r\n  switch (command) {\r\n    case \"help\":\r\n      printResponse(menu, command, helpString);\r\n      break;\r\n    case \"tutorial\":\r\n      window.tutorialMode = true;\r\n      return menu.scene.start(\"Game\");\r\n    case \"help controls\":\r\n      printResponse(menu, command, helpControlsString);\r\n      break;\r\n    case \"help gameplay\":\r\n      printResponse(menu, command, instructions);\r\n      break;\r\n    case \"\":\r\n      break;\r\n    default:\r\n      menu.addHistory(`command not found: ${command}`);\r\n  }\r\n  menu.moveDownALine();\r\n};\r\n","export const alphabet = [\r\n  \"a\",\r\n  \"b\",\r\n  \"c\",\r\n  \"d\",\r\n  \"e\",\r\n  \"f\",\r\n  \"g\",\r\n  \"h\",\r\n  \"i\",\r\n  \"j\",\r\n  \"k\",\r\n  \"l\",\r\n  \"m\",\r\n  \"n\",\r\n  \"o\",\r\n  \"p\",\r\n  \"q\",\r\n  \"r\",\r\n  \"s\",\r\n  \"t\",\r\n  \"u\",\r\n  \"v\",\r\n  \"w\",\r\n  \"x\",\r\n  \"y\",\r\n  \"z\"\r\n];\r\n","import { Menu } from \"../game/scene/Menu\";\r\nimport { FONT_SIZE } from \"../constants/text\";\r\nimport { CELL_SIZE, GAME_HEIGHT, GAME_WIDTH } from \"../constants/game\";\r\nimport { cursorX } from \"./displayer\";\r\nimport { handleCommand } from \"./handleCommand\";\r\nimport { alphabet } from \"../constants/alphabet\";\r\n\r\nconst whitelist: string[] = [...alphabet, \" \"];\r\n\r\nexport const handleInput = (menu: Menu) => (keyEvent: KeyboardEvent) => {\r\n  switch (keyEvent.key) {\r\n    case \"Enter\":\r\n      handleEnter(menu);\r\n      break;\r\n    case \"Backspace\":\r\n      handleDelete(menu);\r\n      break;\r\n    case \"ArrowUp\":\r\n      handleHistoryLoop(menu, 1, 0);\r\n      break;\r\n    case \"ArrowDown\":\r\n      handleHistoryLoop(menu, -1, menu.history.length - 1);\r\n      break;\r\n    default:\r\n      if (!whitelist.includes(keyEvent.key.toLowerCase())) {\r\n        return;\r\n      }\r\n      menu.currentLine += keyEvent.key;\r\n      menu.currentLine = menu.currentLine.slice(\r\n        0,\r\n        GAME_WIDTH / (FONT_SIZE / 2)\r\n      );\r\n      menu.lineText!.setText(menu.currentLine);\r\n  }\r\n\r\n  menu.lineText!.setText(menu.currentLine);\r\n  menu.cursor!.setX(cursorX(menu.lineText!));\r\n};\r\n\r\nconst handleHistoryLoop = (\r\n  menu: Menu,\r\n  modifier: number,\r\n  initialiser: number\r\n) => {\r\n  const history = [...menu.history].reverse();\r\n  const entry = history[menu.historyPosition];\r\n  if (entry === undefined) {\r\n    if (menu.historyPosition !== 0) {\r\n      menu.historyPosition = initialiser;\r\n      menu.currentLine = history[initialiser] || \"\";\r\n    }\r\n  } else {\r\n    menu.currentLine = entry;\r\n    if (menu.historyPosition + modifier === -1) {\r\n      menu.historyPosition = history.length - 1;\r\n    } else {\r\n      menu.historyPosition += modifier;\r\n    }\r\n  }\r\n};\r\n\r\nconst handleDelete = (menu: Menu) => {\r\n  if (menu.currentLine.length > 0) {\r\n    menu.currentLine = menu.currentLine.slice(0, menu.currentLine.length - 1);\r\n  }\r\n};\r\n\r\nconst handleEnter = (menu: Menu) => {\r\n  if (menu.history.length >= GAME_HEIGHT / CELL_SIZE - 4) {\r\n    menu.clearHistory();\r\n  }\r\n  handleCommand(menu, menu.currentLine.toLowerCase());\r\n};\r\n","import Phaser, { GameObjects } from \"phaser\";\r\nimport WebFont from \"webfontloader\";\r\nimport { GAME_HEIGHT, GAME_WIDTH, CELL_SIZE } from \"../../constants/game\";\r\nimport { Colours, StringColours } from \"../../constants/colours\";\r\nimport { FONT, FONT_SIZE } from \"../../constants/text\";\r\nimport { handleInput } from \"../../menu/handleInput\";\r\nimport { cursorX, historyX } from \"../../menu/displayer\";\r\n\r\nconst sceneConfig: Phaser.Types.Scenes.SettingsConfig = {\r\n  active: false,\r\n  visible: false,\r\n  key: \"Menu\"\r\n};\r\n\r\nexport class Menu extends Phaser.Scene {\r\n  public history: string[] = [];\r\n  public historyPosition = 0;\r\n  public currentLine: string = \"\";\r\n  public lineText?: GameObjects.Text;\r\n  public header?: GameObjects.Text;\r\n  public preamble?: GameObjects.Text;\r\n  public cursor?: GameObjects.Rectangle;\r\n  public historyObj?: GameObjects.Group;\r\n\r\n  constructor() {\r\n    super(sceneConfig);\r\n    window.tutorialMode = false;\r\n  }\r\n\r\n  public preload(): void {\r\n    const loadingText = this.add.text(\r\n      GAME_WIDTH / 2,\r\n      GAME_HEIGHT / 2,\r\n      \"loading\"\r\n    );\r\n    const rect = this.add.rectangle(\r\n      GAME_WIDTH / 2,\r\n      GAME_HEIGHT / 2,\r\n      GAME_WIDTH,\r\n      GAME_HEIGHT\r\n    );\r\n    rect.setFillStyle(Colours.BLACK);\r\n    rect.setDepth(2);\r\n    loadingText.setDepth(3);\r\n\r\n    WebFont.load({\r\n      google: {\r\n        families: [\"VT323\"]\r\n      },\r\n      active: () => {\r\n        loadingText.destroy();\r\n        rect.destroy();\r\n        this.onLoaded();\r\n      }\r\n    });\r\n  }\r\n\r\n  private onLoaded = () => {\r\n    this.historyObj = this.add.group();\r\n    this.header = this.add.text(CELL_SIZE, 0, \"vimboy@octobass.games\", {\r\n      fontFamily: FONT,\r\n      fontSize: FONT_SIZE,\r\n      color: StringColours.PINK\r\n    });\r\n\r\n    this.preamble = this.add.text(CELL_SIZE, FONT_SIZE, \"~\", {\r\n      fontFamily: FONT,\r\n      fontSize: FONT_SIZE,\r\n      color: StringColours.YELLOW\r\n    });\r\n\r\n    this.lineText = this.add.text(CELL_SIZE + 30, FONT_SIZE, \"\", {\r\n      fontFamily: FONT,\r\n      fontSize: FONT_SIZE\r\n    });\r\n\r\n    this.cursor = this.add.rectangle(\r\n      cursorX(this.lineText),\r\n      FONT_SIZE + CELL_SIZE / 2,\r\n      5,\r\n      CELL_SIZE,\r\n      Colours.WHITE\r\n    );\r\n    this.tweens.add({\r\n      targets: this.cursor,\r\n      alpha: { from: 0, to: 1 },\r\n      ease: \"Cubic\",\r\n      duration: 1000,\r\n      repeat: -1, // -1: infinity\r\n      yoyo: false\r\n    });\r\n    this.input.keyboard.on(\"keydown\", handleInput(this));\r\n  };\r\n\r\n  public create() {\r\n    this.currentLine = \"\";\r\n  }\r\n\r\n  public update() {}\r\n\r\n  public clearHistory() {\r\n    this.history = [];\r\n    this.historyObj!.clear(true);\r\n  }\r\n\r\n  public addHistory(item: string) {\r\n    const y = this.historyObj!.getChildren().length + 1;\r\n    this.history.push(item);\r\n    this.historyObj!.add(\r\n      this.add.text(historyX, (y - 1) * FONT_SIZE, item, {\r\n        fontFamily: FONT,\r\n        fontSize: FONT_SIZE\r\n      })\r\n    );\r\n  }\r\n\r\n  public moveDownALine = () => {\r\n    const y = this.historyObj!.getChildren().length;\r\n\r\n    this.currentLine = \"\";\r\n    this.lineText!.setY((y + 1) * FONT_SIZE);\r\n    this.cursor!.setY((y + 1) * FONT_SIZE + CELL_SIZE / 2);\r\n    this.preamble!.setY((y + 1) * FONT_SIZE);\r\n    this.header!.setY(y * FONT_SIZE);\r\n    this.historyPosition = 0;\r\n  };\r\n}\r\n","import Phaser from \"phaser\";\r\n\r\nimport { Colours, StringColours } from \"../constants/colours\";\r\nimport {\r\n  GAME_WIDTH,\r\n  CELL_SIZE,\r\n  GAME_START_X,\r\n  PLAY_ZONE_HEIGHT\r\n} from \"../constants/game\";\r\nimport { FONT, FONT_SIZE } from \"../constants/text\";\r\n\r\nclass Background {\r\n  private graphics: Phaser.GameObjects.Graphics;\r\n\r\n  constructor(graphics: Phaser.GameObjects.Graphics) {\r\n    this.graphics = graphics;\r\n  }\r\n\r\n  public drawBackground() {\r\n    // Left bar\r\n    const rect = window.scene.add.rectangle(\r\n      GAME_START_X / 2,\r\n      PLAY_ZONE_HEIGHT / 2,\r\n      GAME_START_X,\r\n      PLAY_ZONE_HEIGHT\r\n    );\r\n    rect.setFillStyle(Colours.BLACK);\r\n    rect.setDepth(2);\r\n\r\n    for (let step = 0; step < PLAY_ZONE_HEIGHT / CELL_SIZE; step++) {\r\n      const y = step * CELL_SIZE;\r\n      // draw background lines\r\n      const rect = new Phaser.Geom.Rectangle(\r\n        GAME_START_X,\r\n        y,\r\n        GAME_WIDTH,\r\n        CELL_SIZE\r\n      );\r\n      this.graphics.fillStyle(\r\n        step % 2 === 0 ? Colours.DARKER_GREEN : Colours.DARK_GREEN\r\n      );\r\n      this.graphics.fillRectShape(rect);\r\n\r\n      // draw line numbers\r\n      const text = window.scene.add.text(0, y, (step + 1).toString(), {\r\n        fontFamily: FONT,\r\n        fontSize: FONT_SIZE,\r\n        align: \"right\",\r\n        fixedWidth: GAME_START_X - 5,\r\n        color: StringColours.WHITE\r\n      });\r\n      text.setAlpha(0.5);\r\n      text.setDepth(3);\r\n    }\r\n  }\r\n}\r\n\r\nexport default Background;\r\n","import { CELL_SIZE, BOTTOM_BAR_Y, PLAY_ZONE_HEIGHT } from \"../constants/game\";\r\n\r\nclass Movement {\r\n  public update = (vimboy: Phaser.GameObjects.Sprite) => {};\r\n\r\n  public downALine(vimboy: Phaser.GameObjects.Sprite) {\r\n    if (vimboy.y + CELL_SIZE >= BOTTOM_BAR_Y) {\r\n      return;\r\n    }\r\n    window.scene.vimboy.playDown();\r\n\r\n    vimboy.setY(vimboy.y + CELL_SIZE);\r\n  }\r\n\r\n  public upALine(vimboy: Phaser.GameObjects.Sprite) {\r\n    if (vimboy.y - CELL_SIZE <= 0) {\r\n      return;\r\n    }\r\n    window.scene.vimboy.playUp();\r\n    vimboy.setY(vimboy.y - CELL_SIZE);\r\n  }\r\n\r\n  public jumpToLine(line: number, vimboy: Phaser.GameObjects.Sprite) {\r\n    const lineNo = this.clamp(line, 1, this.bottomLine());\r\n    window.scene.vimboy.playPop();\r\n    vimboy.setY(lineNo * CELL_SIZE - CELL_SIZE / 2);\r\n  }\r\n\r\n  public jumpBackNLines(n: number, vimboy: Phaser.GameObjects.Sprite) {\r\n    const line = this.currentLine(vimboy) - n;\r\n    this.jumpToLine(line, vimboy);\r\n  }\r\n\r\n  public currentLine = (vimboy: Phaser.GameObjects.Sprite): number =>\r\n    (vimboy.y + CELL_SIZE / 2) / CELL_SIZE;\r\n\r\n  private bottomLine = (): number => PLAY_ZONE_HEIGHT / CELL_SIZE;\r\n\r\n  private clamp = (num: number, min: number, max: number) =>\r\n    num <= min ? min : num >= max ? max : num;\r\n}\r\n\r\nexport default Movement;\r\n","import { Images, CLASH_START_FRAME, CLASH_FRAME_COUNT } from \"./ImageLoader\";\r\n\r\nexport enum Animations {\r\n  VIMBOY_BOB = \"VIMBOY_BOB\",\r\n  VIMBOY_WORD_ATTACK = \"VIMBOY_WORD_ATTACK\",\r\n  VIMBOY_UP = \"VIMBOY_UP\",\r\n  VIMBOY_DOWN = \"VIMBOY_DOWN\",\r\n  VIMBOY_POP = \"VIMBOY_POP\",\r\n  CLASH = \"CLASH\"\r\n}\r\n\r\nconst createFrameConfig = (\r\n  key: Animations,\r\n  frameStart: number,\r\n  frameCount: number,\r\n  repeat: number = 0\r\n) => ({\r\n  key,\r\n  frames: window.scene.anims.generateFrameNumbers(Images.VIMBOY, {\r\n    frames: Array.from(Array(frameCount).keys()).map(k => frameStart + k)\r\n  }),\r\n  frameRate: 10,\r\n  repeat\r\n});\r\n\r\nexport const loadAnimations = () => {\r\n  window.scene.anims.create(createFrameConfig(Animations.VIMBOY_BOB, 0, 5, -1));\r\n\r\n  window.scene.anims.create(\r\n    createFrameConfig(Animations.VIMBOY_WORD_ATTACK, 5, 1)\r\n  );\r\n\r\n  window.scene.anims.create(createFrameConfig(Animations.VIMBOY_UP, 1, 3));\r\n\r\n  window.scene.anims.create(createFrameConfig(Animations.VIMBOY_DOWN, 6, 3));\r\n\r\n  window.scene.anims.create(createFrameConfig(Animations.VIMBOY_POP, 9, 1));\r\n\r\n  window.scene.anims.create(\r\n    createFrameConfig(Animations.CLASH, CLASH_START_FRAME, CLASH_FRAME_COUNT)\r\n  );\r\n};\r\n","export enum EntityType {\r\n  WORD_TYPE_ENEMY = \"WORD_TYPE_ENEMY\",\r\n  WORD_ATTACK = \"WORD_ATTACK\",\r\n  PICKUP = \"PICKUP\"\r\n}\r\n\r\ninterface BaseEntity {\r\n  line: number;\r\n  type: EntityType;\r\n  normalVelocity: number;\r\n}\r\n\r\nexport interface WordAttack extends BaseEntity {\r\n  type: EntityType.WORD_ATTACK;\r\n}\r\n\r\nexport interface Enemy extends BaseEntity {\r\n  onCollision: (\r\n    entity: Entity,\r\n    gameObject: Phaser.GameObjects.GameObject\r\n  ) => void;\r\n  words: string[];\r\n  type: EntityType.WORD_TYPE_ENEMY;\r\n}\r\n\r\nexport interface Pickup extends BaseEntity {\r\n  colour: number;\r\n  type: EntityType.PICKUP;\r\n}\r\n\r\ntype Entity = Enemy | Pickup | WordAttack;\r\n\r\nexport default Entity;\r\n","export const enableBody = (\r\n  obj: Phaser.GameObjects.GameObject\r\n): Phaser.Physics.Arcade.Body => {\r\n  window.scene.physics.world.enableBody(obj);\r\n\r\n  const body = obj.body as Phaser.Physics.Arcade.Body;\r\n\r\n  body.setAllowGravity(false);\r\n  return body;\r\n};\r\n\r\nexport const setVelocity = (\r\n  body: Phaser.Physics.Arcade.Body,\r\n  xVelocity: number\r\n) => {\r\n  body.setAllowRotation(false);\r\n  body.setVelocityX(window.scene.tweens.timeScale * xVelocity);\r\n};\r\n","export const words: string[][] = [\r\n  [\"console\", \".\", \"log\", \"(\", \"'Hello, World!'\", \")\"],\r\n  [\"const\", \" \", \"fn\", \" \", \"=\", \"(\", \")\", \"=>\", \"{}\"],\r\n  [\"class\", \" \", \"Pizza\", \" \", \"{}\"],\r\n  [\"Random\", \".\", \"getNumber\", \"(\", \"words\", \".\", \"length\", \")\"],\r\n  [\"range\", \"(\", \"2\", \",\", \"10\", \")\"]\r\n];\r\n","import { Colours, StringColours } from \"../../constants/colours\";\r\nimport { words } from \"./words\";\r\n\r\nclass Random {\r\n  private static colours: Colours[] = [\r\n    Colours.PINK,\r\n    Colours.RED,\r\n    Colours.YELLOW,\r\n    Colours.BLUE,\r\n    Colours.GREEN\r\n  ];\r\n\r\n  public static stringColours: StringColours[] = [\r\n    StringColours.PINK,\r\n    StringColours.RED,\r\n    StringColours.YELLOW,\r\n    StringColours.BLUE,\r\n    StringColours.GREEN\r\n  ];\r\n\r\n  public static getNumber(max: number): number {\r\n    return Math.round(Math.floor(Math.random() * Math.floor(max)));\r\n  }\r\n\r\n  /* Returns a random integer between min (inclusive) and max (inclusive).\r\n   */\r\n  public static getRandomInt(min: number, max: number) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n  }\r\n\r\n  public static getWords(): string[] {\r\n    const index = Random.getNumber(words.length);\r\n    return words[index];\r\n  }\r\n\r\n  public static randomEnum<T>(anEnum: T): T[keyof T] {\r\n    const enumValues = (Object.keys(anEnum)\r\n      .map(n => Number.parseInt(n))\r\n      .filter(n => !Number.isNaN(n)) as unknown) as T[keyof T][];\r\n    const randomIndex = Math.floor(Math.random() * enumValues.length);\r\n    const randomEnumValue = enumValues[randomIndex];\r\n    return randomEnumValue;\r\n  }\r\n\r\n  public static randomStringEnum<T>(anEnum: T): T[keyof T] {\r\n    const enumValues = Object.values(anEnum);\r\n    const index = Random.getNumber(enumValues.length);\r\n    return enumValues[index];\r\n  }\r\n\r\n  public static randomBool = (): boolean => Random.getNumber(2) === 1;\r\n\r\n  public static getColour(): Colours {\r\n    const index = Random.getNumber(this.colours.length);\r\n    return this.colours[index];\r\n  }\r\n\r\n  public static getStringColour(): StringColours {\r\n    const index = Random.getNumber(this.stringColours.length);\r\n    return this.stringColours[index];\r\n  }\r\n}\r\n\r\nexport default Random;\r\n","export enum Sound {\r\n  MUSIC = \"music\",\r\n  BAD = \"bad\",\r\n  GOOD = \"good\",\r\n  DEATH = \"death\",\r\n  GOOD_SCORE = \"good-score\",\r\n  BOOP = \"boop\"\r\n}\r\n\r\nconst url = (name: string) =>\r\n  `https://storage.googleapis.com/octobass-vimboy/sounds/${name}.wav`;\r\n\r\nconst preloadSounds = () => {\r\n  window.scene.load.audio(Sound.MUSIC, [url(\"vimboy-theme\")]);\r\n  window.scene.load.audio(Sound.BAD, [url(\"bad\")]);\r\n  window.scene.load.audio(Sound.DEATH, [url(\"death\")]);\r\n  window.scene.load.audio(Sound.GOOD, [url(\"good\")]);\r\n  window.scene.load.audio(Sound.BOOP, [url(\"boop\")]);\r\n  window.scene.load.audio(Sound.GOOD_SCORE, [url(\"good-score\")]);\r\n};\r\n\r\nexport default preloadSounds;\r\n","import { Images } from \"../loaders/ImageLoader\";\r\nimport Random from \"./Random\";\r\nimport { Animations } from \"../loaders/AnimationLoader\";\r\nimport { StringColours } from \"../../constants/colours\";\r\nimport { FONT } from \"../../constants/text\";\r\nimport { CELL_SIZE } from \"../../constants/game\";\r\n\r\nexport const playClashAnimation = (x: number, y: number) => {\r\n  const image = window.scene.add\r\n    .sprite(x, y, Images.VIMBOY)\r\n    .setTint(Random.getColour())\r\n    .setAlpha(0.7);\r\n  image.setFrame(10);\r\n\r\n  image.anims.play(Animations.CLASH);\r\n\r\n  window.scene.time.addEvent({\r\n    delay: 200,\r\n    callback: () => {\r\n      image.destroy();\r\n    }\r\n  });\r\n};\r\n\r\nexport const playTextFlash = (x: number, y: number, text: string) => {\r\n  const object = window.scene.add.text(x, y, text, {\r\n    fontFamily: FONT,\r\n    fontSize: CELL_SIZE,\r\n    align: \"center\",\r\n    color: StringColours.WHITE\r\n  });\r\n\r\n  window.scene.time.addEvent({\r\n    delay: 500,\r\n    callback: () => {\r\n      object.destroy();\r\n    }\r\n  });\r\n};\r\n","import Action from \"../action/Action\";\r\nimport { Verb, Noun } from \"../../../constants/verbsAndNouns\";\r\n\r\nexport enum BindingType {\r\n  NORMAL,\r\n  PICKUP\r\n}\r\n\r\ninterface BindingBase {\r\n  key: string;\r\n  action: Action;\r\n  type: BindingType;\r\n}\r\n\r\nexport interface NormalBinding extends BindingBase {\r\n  type: BindingType.NORMAL;\r\n}\r\n\r\nexport interface PickupBinding extends BindingBase {\r\n  type: BindingType.PICKUP;\r\n  verb: Verb;\r\n  noun: Noun;\r\n  name: string;\r\n}\r\n\r\ntype Binding = NormalBinding | PickupBinding;\r\n\r\nexport default Binding;\r\n","import { CELL_SIZE, PLAY_ZONE_HEIGHT, GAME_START_X } from \"../constants/game\";\r\nimport Movement from \"./Movement\";\r\nimport { Images } from \"./loaders/ImageLoader\";\r\nimport { Animations } from \"./loaders/AnimationLoader\";\r\nimport { Colours } from \"../constants/colours\";\r\nimport { enableBody } from \"./entities/helpers/BodyCreator\";\r\nimport { GameObjects } from \"phaser\";\r\nimport Entity, { EntityType } from \"./entities/Entity\";\r\nimport { playClashAnimation } from \"./utils/animationPlayer\";\r\nimport { Sound } from \"./loaders/SoundLoader\";\r\n\r\nclass VimBoy {\r\n  public movement?: Movement;\r\n  public vimboy?: Phaser.GameObjects.Sprite;\r\n  private bulletProof: boolean = false;\r\n\r\n  public create = () => {\r\n    this.bulletProof = false;\r\n    this.movement = new Movement();\r\n\r\n    this.vimboy = window.scene.add.sprite(\r\n      GAME_START_X + 50 / 2,\r\n      PLAY_ZONE_HEIGHT - CELL_SIZE / 2,\r\n      Images.VIMBOY\r\n    );\r\n\r\n    enableBody(this.vimboy);\r\n\r\n    window.scene.vimboy.changeColour(Colours.LIGHT_GREEN);\r\n  };\r\n\r\n  public update = () => {\r\n    this.movement!.update(this.vimboy!);\r\n\r\n    if (!this.vimboy!.anims.isPlaying) {\r\n      this.vimboy!.anims.play(Animations.VIMBOY_BOB, true);\r\n    }\r\n  };\r\n\r\n  public onEnemyCollision = (\r\n    player: Phaser.GameObjects.GameObject,\r\n    enemy: Phaser.GameObjects.GameObject\r\n  ) => {\r\n    if (!this.bulletProof) {\r\n      window.scene.entityManager.destroyEnemy(enemy);\r\n      window.scene.health.injure();\r\n      this.vimboy!.setTint(Colours.RED);\r\n\r\n      window.scene.time.addEvent({\r\n        delay: 200,\r\n        callback: () => {\r\n          this.vimboy!.setTint(window.scene.modeManager.getCurrentColour());\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  public setBulletProof = (bulletProof: boolean) => {\r\n    this.bulletProof = bulletProof;\r\n  };\r\n\r\n  public onPickupCollision = (\r\n    player: Phaser.GameObjects.GameObject,\r\n    pickup: Phaser.GameObjects.GameObject\r\n  ) => {\r\n    const pickupEntity = pickup.getData(\"data\") as Entity;\r\n\r\n    if (pickupEntity.type === EntityType.PICKUP) {\r\n      const obj = pickup as GameObjects.Sprite;\r\n\r\n      playClashAnimation(obj.x, obj.y);\r\n      window.scene.sound.play(Sound.BOOP);\r\n\r\n      window.scene.entityManager.destroyNonEnemy(pickup);\r\n      window.scene.powerUpManager.addPowerUp(pickupEntity.colour);\r\n    }\r\n  };\r\n\r\n  public playWordAttack = () =>\r\n    this.vimboy!.anims.play(Animations.VIMBOY_WORD_ATTACK, true);\r\n\r\n  public playUp = () => this.vimboy!.anims.play(Animations.VIMBOY_UP, true);\r\n  public playDown = () => this.vimboy!.anims.play(Animations.VIMBOY_DOWN, true);\r\n  public playPop = () => this.vimboy!.anims.play(Animations.VIMBOY_POP, true);\r\n\r\n  public jumpToLine = (lineNumber: number) =>\r\n    this.movement!.jumpToLine(lineNumber, this.vimboy!);\r\n\r\n  public getLineNumber = (): number => this.movement!.currentLine(this.vimboy!);\r\n\r\n  public jumpBackNLines = (n: number) =>\r\n    this.movement!.jumpBackNLines(n, this.vimboy!);\r\n\r\n  public currentLine = () => this.movement!.currentLine(this.vimboy!);\r\n\r\n  public changeColour = (colour: number) => this.vimboy!.setTint(colour);\r\n}\r\n\r\nexport default VimBoy;\r\n","abstract class Mode {\r\n  public name: string;\r\n  public display: string;\r\n\r\n  constructor(name: string, display: string) {\r\n      this.name = name;\r\n      this.display = display;\r\n  }\r\n\r\n  abstract handle(keyEvent: KeyboardEvent): void;\r\n}\r\n\r\nexport default Mode;\r\n","export enum Verb {\r\n  d = \"d\"\r\n}\r\n\r\nexport enum Noun {\r\n  w = \"w\",\r\n  d = \"d\"\r\n}\r\n\r\nexport const VERB_WORDS: Record<Verb, string> = {\r\n  [Verb.d]: \"Delete\"\r\n};\r\n\r\nexport const NOUN_WORDS: Record<Noun, string> = {\r\n  [Noun.w]: \"Word\",\r\n  [Noun.d]: \"Line\" // wtf vim\r\n};\r\n","import Action from './Action';\r\n\r\nclass EnterInsertMode implements Action {\r\n    act() {\r\n        window.scene.modeManager.switchToInsert();\r\n    }\r\n}\r\n\r\nexport default EnterInsertMode;\r\n","import Action from './Action';\r\n\r\nclass MoveDown implements Action {\r\n    act() {\r\n        window.scene.vimboy.movement!.downALine(window.scene.vimboy.vimboy!);\r\n    }\r\n}\r\n\r\nexport default MoveDown;\r\n","import Action from './Action';\r\n\r\nclass MoveUp implements Action {\r\n    act() {\r\n        window.scene.vimboy.movement!.upALine(window.scene.vimboy.vimboy!);\r\n    }\r\n}\r\n\r\nexport default MoveUp;\r\n","import Action from \"./Action\";\r\n\r\nclass MoveLeft implements Action {\r\n  act() {\r\n    window.scene.entityManager.moveEverythingRight();\r\n  }\r\n}\r\n\r\nexport default MoveLeft;\r\n","import Action from \"./Action\";\r\n\r\nclass MoveRight implements Action {\r\n  act() {\r\n    window.scene.entityManager.moveEverythingLeft();\r\n  }\r\n}\r\n\r\nexport default MoveRight;\r\n","import Action from './Action';\r\n\r\nclass MoveToTop implements Action {\r\n    act() {\r\n        window.scene.vimboy.movement!.jumpToLine(1, window.scene.vimboy.vimboy!);\r\n    }\r\n}\r\n\r\nexport default MoveToTop;\r\n","import Action from './Action';\r\nimport { PLAY_ZONE_HEIGHT, CELL_SIZE } from '../../../constants/game';\r\n\r\nclass MoveToBottom implements Action {\r\n    act() {\r\n        window.scene.vimboy.movement!.jumpToLine(PLAY_ZONE_HEIGHT / CELL_SIZE, window.scene.vimboy.vimboy!);\r\n    }\r\n}\r\n\r\nexport default MoveToBottom;\r\n","import Action from './Action';\r\n\r\nclass EnterCommandMode implements Action {\r\n    act() {\r\n        window.scene.modeManager.switchToCommand();\r\n    }\r\n}\r\n\r\nexport default EnterCommandMode;\r\n","import Action from './Action';\r\nimport Enemy from '../../entities/Entity';\r\n\r\nclass JumpBackParagraph implements Action {\r\n    act(): void {\r\n        const { scene: { entityManager, vimboy } } = window;\r\n\r\n        const isAboveVimboy = (enemy: any) => (enemy.getData(\"data\") as Enemy).line < vimboy.currentLine();\r\n        const isOverlappingVimboy = (enemy: any) => {\r\n            const body = enemy.body as Phaser.Physics.Arcade.Body;\r\n            return body.x < 25 && body.x + body.width > 25;\r\n        };\r\n\r\n        const jumpableLines = entityManager\r\n            .getEnemies()\r\n            .filter(isAboveVimboy)\r\n            .filter(isOverlappingVimboy)\r\n            .map(enemy => (enemy.getData(\"data\") as Enemy).line)\r\n            .sort()\r\n            .reverse();\r\n\r\n        let idx = 0;\r\n        while (idx < jumpableLines.length) {\r\n            if (jumpableLines[idx] - jumpableLines[idx + 1] === 1) {\r\n                idx++;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        jumpableLines[idx] && vimboy.jumpToLine(jumpableLines[idx]);\r\n    }\r\n}\r\n\r\nexport default JumpBackParagraph;\r\n","import Action from \"./Action\";\r\nimport VimBoy from \"../../VimBoy\";\r\n\r\nclass DeleteLine implements Action {\r\n  act() {\r\n    const vimboy: VimBoy = window.scene.vimboy;\r\n    const currentLine: number = vimboy.currentLine();\r\n\r\n    const word = window.scene.entityManager.getFirstWordOnLine(currentLine - 1);\r\n\r\n    if (word) {\r\n      window.scene.scoreBoard.updateScore(word.text.length);\r\n      window.scene.entityManager.destroyEnemy(word);\r\n    }\r\n  }\r\n}\r\n\r\nexport default DeleteLine;\r\n","import Action from \"./Action\";\r\nimport VimBoy from \"../../VimBoy\";\r\nimport { Enemy } from \"../../entities/Entity\";\r\n\r\nclass DeleteWord implements Action {\r\n  act(): void {\r\n    const vimboy: VimBoy = window.scene.vimboy;\r\n    const currentLine: number = vimboy.currentLine();\r\n\r\n    const word = window.scene.entityManager.getFirstWordOnLine(currentLine - 1);\r\n\r\n    if (word) {\r\n      const data = word.getData(\"data\") as Enemy;\r\n\r\n      window.scene.scoreBoard.updateScore(data.words[0].length);\r\n      if (data.words.length === 1) {\r\n        window.scene.entityManager.destroyEnemy(word);\r\n      } else {\r\n        const [, ...newWords] = data.words;\r\n\r\n        const newData: Enemy = {\r\n          ...data,\r\n          words: newWords\r\n        };\r\n\r\n        word.setData(\"data\", newData);\r\n        word.setText(newWords.join(\"\"));\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default DeleteWord;\r\n","import EnterInsertMode from \"../action/EnterInsertMode\";\r\nimport Binding, { BindingType } from \"./Binding\";\r\nimport MoveDown from \"../action/MoveDown\";\r\nimport MoveUp from \"../action/MoveUp\";\r\nimport MoveLeft from \"../action/MoveLeft\";\r\nimport MoveRight from \"../action/MoveRight\";\r\nimport MoveToTop from \"../action/MoveToTop\";\r\nimport MoveToBottom from \"../action/MoveToBottom\";\r\nimport EnterCommandMode from \"../action/EnterCommandMode\";\r\nimport JumpBackParagraph from \"../action/JumpBackParagraph\";\r\nimport DeleteLine from \"../action/DeleteLine\";\r\nimport { Verb, Noun } from \"../../../constants/verbsAndNouns\";\r\nimport DeleteWord from \"../action/DeleteWord\";\r\n\r\nconst bindings: Binding[] = [\r\n  { key: \"i\", action: new EnterInsertMode(), type: BindingType.NORMAL },\r\n  { key: \"j\", action: new MoveDown(), type: BindingType.NORMAL },\r\n  { key: \"k\", action: new MoveUp(), type: BindingType.NORMAL },\r\n  { key: \"h\", action: new MoveLeft(), type: BindingType.NORMAL },\r\n  { key: \"l\", action: new MoveRight(), type: BindingType.NORMAL },\r\n  { key: \"gg\", action: new MoveToTop(), type: BindingType.NORMAL },\r\n  { key: \"ShiftG\", action: new MoveToBottom(), type: BindingType.NORMAL },\r\n  { key: \"Shift:\", action: new EnterCommandMode(), type: BindingType.NORMAL },\r\n  {\r\n    key: \"Shift{\",\r\n    action: new JumpBackParagraph(),\r\n    type: BindingType.NORMAL\r\n  },\r\n  {\r\n    key: \"dd\",\r\n    action: new DeleteLine(),\r\n    type: BindingType.PICKUP,\r\n    verb: Verb.d,\r\n    noun: Noun.d,\r\n    name: \"Delete Line\"\r\n  },\r\n  {\r\n    key: \"dw\",\r\n    action: new DeleteWord(),\r\n    type: BindingType.PICKUP,\r\n    verb: Verb.d,\r\n    noun: Noun.w,\r\n    name: \"Delete Word\"\r\n  }\r\n];\r\n\r\nexport default bindings;\r\n","import Mode from \"./Mode\";\r\nimport Binding, { BindingType, PickupBinding } from \"./binding/Binding\";\r\nimport { Verb } from \"../../constants/verbsAndNouns\";\r\nimport { Sound } from \"../loaders/SoundLoader\";\r\nimport normalModeBindings from \"./binding/normalModeBindings\";\r\n\r\nconst verbs: string[] = Object.values(Verb);\r\n\r\nclass NormalMode extends Mode {\r\n  private input: string = \"\";\r\n\r\n  constructor() {\r\n    super(\"normal\", \"\");\r\n  }\r\n\r\n  handle(keyEvent: KeyboardEvent) {\r\n    const key = keyEvent.key.toLowerCase();\r\n    if (key === \"escape\") {\r\n      this.clear();\r\n    } else {\r\n      this.input = this.input.concat(key);\r\n      const binding = normalModeBindings.find(\r\n        b => this.input === b.key.toLowerCase()\r\n      );\r\n\r\n      if (binding) {\r\n        this.useBinding(binding);\r\n      } else if (\r\n        !normalModeBindings.some(b => b.key.toLowerCase().includes(this.input))\r\n      ) {\r\n        this.clear();\r\n      } else {\r\n        if (verbs.includes(this.input)) {\r\n          const verb = this.input as Verb;\r\n          this.powerUpManager().setVerbIfAvailable(verb);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private clear = () => {\r\n    this.powerUpManager().clear();\r\n    this.input = \"\";\r\n  };\r\n\r\n  private useBinding = (binding: Binding) => {\r\n    if (binding.type === BindingType.PICKUP) {\r\n      this.handlePickup(binding);\r\n    } else {\r\n      binding.action.act();\r\n      this.clear();\r\n    }\r\n  };\r\n\r\n  private handlePickup = (binding: PickupBinding) => {\r\n    if (this.powerUpManager().hasVerb()) {\r\n      this.powerUpManager().setNounIfAvailable(binding.noun);\r\n      if (this.powerUpManager().canUsePowerUp(binding.verb, binding.noun)) {\r\n        this.powerUpManager().use(binding.name);\r\n        window.scene.sound.play(Sound.GOOD);\r\n        binding.action.act();\r\n        this.clear();\r\n        return;\r\n      }\r\n    }\r\n\r\n    this.powerUpManager().unusedClear();\r\n    this.input = \"\";\r\n  };\r\n\r\n  private powerUpManager = () => window.scene.powerUpManager;\r\n}\r\n\r\nexport default NormalMode;\r\n","import Action from './Action';\r\n\r\nclass EnterNormalMode implements Action {\r\n    act() {\r\n        window.scene.modeManager.switchToNormal();\r\n    }\r\n}\r\n\r\nexport default EnterNormalMode;\r\n","import { FONT, FONT_SIZE } from \"../../../constants/text\";\r\nimport { StringColours } from \"../../../constants/colours\";\r\nimport { GameObjects } from \"phaser\";\r\nimport { enableBody, setVelocity } from \"./BodyCreator\";\r\n\r\ninterface CreateText {\r\n  x: number;\r\n  y: number;\r\n  word: string;\r\n  xVelocity: number;\r\n  colour: StringColours;\r\n}\r\n\r\nexport const createText = ({\r\n  x,\r\n  y,\r\n  word,\r\n  xVelocity,\r\n  colour\r\n}: CreateText): GameObjects.Text => {\r\n  const text = window.scene.add\r\n    .text(x, y, word, {\r\n      fontFamily: FONT,\r\n      fontSize: FONT_SIZE\r\n    })\r\n    .setColor(colour);\r\n\r\n  const body = enableBody(text);\r\n  setVelocity(body, xVelocity);\r\n\r\n  return text;\r\n};\r\n","import Entity, { EntityType } from \"../Entity\";\r\nimport { CELL_SIZE, GAME_START_X } from \"../../../constants/game\";\r\nimport { createText } from \"../helpers/TextCreator\";\r\nimport Random from \"../../utils/Random\";\r\n\r\nconst createWordAttack = (letter: string) => {\r\n  const y = window.scene.vimboy.vimboy!.y - CELL_SIZE / 2;\r\n  const line = y / CELL_SIZE;\r\n  const velocity = CELL_SIZE;\r\n\r\n  const text = createText({\r\n    x: GAME_START_X + CELL_SIZE * 1.5,\r\n    y,\r\n    word: letter,\r\n    xVelocity: velocity,\r\n    colour: Random.getStringColour()\r\n  });\r\n\r\n  const entity: Entity = {\r\n    line,\r\n    type: EntityType.WORD_ATTACK,\r\n    normalVelocity: velocity\r\n  };\r\n\r\n  text.setData({ data: entity });\r\n\r\n  return text;\r\n};\r\n\r\nexport default createWordAttack;\r\n","import Mode from \"./Mode\";\r\nimport EnterNormalMode from \"./action/EnterNormalMode\";\r\nimport createWordAttack from \"../entities/nonEnemies/WordAttack\";\r\n\r\nclass InsertMode extends Mode {\r\n  constructor() {\r\n    super(\"insert\", \"-- INSERT --\");\r\n  }\r\n\r\n  handle(keyEvent: KeyboardEvent) {\r\n    if (keyEvent.key === \"Escape\") {\r\n      new EnterNormalMode().act();\r\n    } else {\r\n      window.scene.entityManager.createNonEnemy(() =>\r\n        createWordAttack(keyEvent.key)\r\n      );\r\n      window.scene.vimboy.playWordAttack();\r\n    }\r\n  }\r\n}\r\n\r\nexport default InsertMode;\r\n","import Mode from \"./Mode\";\r\nimport EnterNormalMode from \"./action/EnterNormalMode\";\r\n\r\nclass CommandMode extends Mode {\r\n  private static whitelist: string[] = [\r\n    \"a\",\r\n    \"b\",\r\n    \"c\",\r\n    \"d\",\r\n    \"e\",\r\n    \"f\",\r\n    \"g\",\r\n    \"h\",\r\n    \"i\",\r\n    \"j\",\r\n    \"k\",\r\n    \"l\",\r\n    \"m\",\r\n    \"n\",\r\n    \"o\",\r\n    \"p\",\r\n    \"q\",\r\n    \"r\",\r\n    \"s\",\r\n    \"t\",\r\n    \"u\",\r\n    \"v\",\r\n    \"w\",\r\n    \"x\",\r\n    \"y\",\r\n    \"z\",\r\n    \"0\",\r\n    \"1\",\r\n    \"2\",\r\n    \"3\",\r\n    \"4\",\r\n    \"5\",\r\n    \"6\",\r\n    \"7\",\r\n    \"8\",\r\n    \"9\"\r\n  ];\r\n\r\n  private input: string = \"\";\r\n\r\n  constructor() {\r\n    super(\"command\", \"\");\r\n  }\r\n\r\n  handle(keyEvent: KeyboardEvent) {\r\n    const key = keyEvent.key.toLowerCase();\r\n    if (key === \"enter\") {\r\n      const lineNumber = parseInt(this.input);\r\n\r\n      if (!isNaN(lineNumber)) {\r\n        window.scene.vimboy.jumpToLine(lineNumber);\r\n        new EnterNormalMode().act();\r\n      } else {\r\n        this.handleStringCommands(this.input);\r\n      }\r\n    } else if (key === \"backspace\" && this.input.length > 0) {\r\n      this.input = this.input.slice(0, this.input.length - 1);\r\n    } else if (key === \"escape\") {\r\n      new EnterNormalMode().act();\r\n    } else if (CommandMode.whitelist.includes(key)) {\r\n      this.input = this.input.concat(key);\r\n    }\r\n  }\r\n\r\n  public getCommand(): string {\r\n    return this.input;\r\n  }\r\n\r\n  private handleStringCommands = (str: string) => {\r\n    switch (str.toLowerCase()) {\r\n      case \"q\":\r\n        window.scene.sound.stopAll();\r\n        window.scene.scene.start(\"Menu\");\r\n\r\n        return;\r\n      default:\r\n        console.log(\"command not found\");\r\n    }\r\n    new EnterNormalMode().act();\r\n  };\r\n}\r\n\r\nexport default CommandMode;\r\n","import Mode from \"./mode/Mode\";\r\nimport NormalMode from \"./mode/NormalMode\";\r\nimport InsertMode from \"./mode/InsertMode\";\r\nimport CommandMode from \"./mode/CommandMode\";\r\nimport { Colours } from \"../constants/colours\";\r\n\r\nclass ModeManager {\r\n  public mode: Mode;\r\n  private colour: Colours = Colours.LIGHT_GREEN;\r\n  private allowedKeys: Set<string> = new Set();\r\n\r\n  private allowedKeysMode: boolean = false;\r\n\r\n  constructor() {\r\n    this.mode = new NormalMode();\r\n  }\r\n\r\n  public create() {\r\n    this.allowedKeysMode = false;\r\n    this.allowedKeys = new Set();\r\n    this.listen();\r\n  }\r\n\r\n  private listen = () => {\r\n    window.scene.keyCapturer!.addListener(\r\n      \"keydown\",\r\n      (keyEvent: KeyboardEvent) => {\r\n        if (!this.allowedKeysMode) {\r\n          this.mode.handle(keyEvent);\r\n        } else if (this.allowedKeys.has(keyEvent.key.toLowerCase())) {\r\n          this.mode.handle(keyEvent);\r\n        }\r\n      }\r\n    );\r\n    window.scene.tweens.setGlobalTimeScale(0.2);\r\n  };\r\n\r\n  public update() {}\r\n\r\n  public allow = (...keys: string[]) => {\r\n    this.allowedKeysMode = true;\r\n    keys.forEach(key => {\r\n      this.allowedKeys.add(key.toLowerCase());\r\n    });\r\n  };\r\n\r\n  public allowNone = () => {\r\n    this.allowedKeysMode = true;\r\n    this.allowedKeys = new Set();\r\n  };\r\n\r\n  public allowAll = () => {\r\n    this.allowedKeysMode = false;\r\n    this.allowedKeys = new Set();\r\n  };\r\n\r\n  public setMode = (mode: Mode) => {\r\n    this.mode = mode;\r\n  };\r\n\r\n  public switchToInsert(): void {\r\n    this.mode = new InsertMode();\r\n    this.colour = Colours.LIGHT_BLUE;\r\n    window.scene.vimboy.changeColour(this.colour);\r\n\r\n    window.scene.tweens.setGlobalTimeScale(1);\r\n    window.scene.entityManager.matchToTimescale();\r\n  }\r\n\r\n  public switchToNormal(): void {\r\n    this.mode = new NormalMode();\r\n    this.colour = Colours.LIGHT_GREEN;\r\n    window.scene.vimboy.changeColour(this.colour);\r\n\r\n    window.scene.tweens.setGlobalTimeScale(0.2);\r\n    window.scene.entityManager.matchToTimescale();\r\n  }\r\n\r\n  public switchToCommand(): void {\r\n    this.colour = Colours.PINK;\r\n    window.scene.vimboy.changeColour(this.colour);\r\n    window.scene.entityManager.matchToTimescale();\r\n    this.mode = new CommandMode();\r\n  }\r\n\r\n  public getCurrentColour = () => this.colour;\r\n}\r\n\r\nexport default ModeManager;\r\n","import {\r\n  GAME_HEIGHT,\r\n  CELL_SIZE,\r\n  GAME_WIDTH,\r\n  BOTTOM_BAR_Y\r\n} from \"../constants/game\";\r\n\r\nimport { Colours } from \"../constants/colours\";\r\nimport { FONT, FONT_SIZE } from \"../constants/text\";\r\nimport CommandMode from \"./mode/CommandMode\";\r\n\r\nconst padding = 10;\r\n\r\nclass StatusLine {\r\n  private modeText?: Phaser.GameObjects.Text;\r\n  private commandText?: Phaser.GameObjects.Text;\r\n\r\n  public create = () => {\r\n    this.initBackground();\r\n    this.initMode();\r\n    this.initCommandText();\r\n  };\r\n\r\n  public update = () => {\r\n    if (this.modeText!.text !== this.modeString()) {\r\n      this.modeText!.setText(this.modeString());\r\n    }\r\n\r\n    if (this.mode().name === \"command\") {\r\n      this.renderCommand();\r\n    } else {\r\n      this.hideCommand();\r\n    }\r\n  };\r\n\r\n  private hideCommand = () => {\r\n    this.commandText!.setText(\"\");\r\n  };\r\n\r\n  private renderCommand = () => {\r\n    const mode = window.scene.modeManager.mode as CommandMode;\r\n    this.commandText!.setText(\":\" + mode.getCommand());\r\n  };\r\n\r\n  private modeString = (): string => window.scene.modeManager.mode.display;\r\n\r\n  private mode = () => window.scene.modeManager.mode;\r\n\r\n  private initBackground = () => {\r\n    const rect = new Phaser.Geom.Rectangle(\r\n      0,\r\n      GAME_HEIGHT - CELL_SIZE * 2,\r\n      GAME_WIDTH,\r\n      CELL_SIZE * 2\r\n    );\r\n    window.scene.graphics!.fillStyle(Colours.BLACK);\r\n    window.scene.graphics!.fillRectShape(rect);\r\n  };\r\n\r\n  private initMode = () => {\r\n    this.modeText = window.scene.add.text(\r\n      padding,\r\n      GAME_HEIGHT - CELL_SIZE / 2 - padding,\r\n      this.modeString(),\r\n      {\r\n        fontFamily: FONT,\r\n        fontSize: FONT_SIZE / 2\r\n      }\r\n    );\r\n  };\r\n\r\n  private initCommandText = () => {\r\n    this.commandText = window.scene.add.text(0, BOTTOM_BAR_Y, \"\", {\r\n      fontFamily: FONT,\r\n      fontSize: FONT_SIZE\r\n    });\r\n  };\r\n}\r\n\r\nexport default StatusLine;\r\n","import { BOTTOM_BAR_Y, GAME_WIDTH } from \"../constants/game\";\r\nimport { FONT, FONT_SIZE } from \"../constants/text\";\r\n\r\nclass ScoreBoard {\r\n  private text?: Phaser.GameObjects.Text;\r\n  public score: number = 0;\r\n\r\n  public create() {\r\n    this.text = window.scene.add.text(\r\n      this.getTextXPosition(),\r\n      BOTTOM_BAR_Y,\r\n      this.score.toString(),\r\n      {\r\n        fontFamily: FONT,\r\n        fontSize: FONT_SIZE\r\n      }\r\n    );\r\n  }\r\n\r\n  public updateScore = (points: number) => {\r\n    this.score += points;\r\n    this.text!.setText(this.score.toString()).setX(this.getTextXPosition());\r\n  };\r\n\r\n  public resetScore = () => {\r\n    this.score = 0;\r\n    this.text!.setText(this.score.toString()).setX(this.getTextXPosition());\r\n  };\r\n\r\n  private getTextXPosition = () =>\r\n    GAME_WIDTH - this.score.toString().length * 30;\r\n}\r\n\r\nexport default ScoreBoard;\r\n","import { GAME_WIDTH, CELL_SIZE, GAME_HEIGHT } from \"../constants/game\";\r\nimport { Colours } from \"../constants/colours\";\r\nimport { Images, HEART_FRAME } from \"./loaders/ImageLoader\";\r\nimport { Sound } from \"./loaders/SoundLoader\";\r\n\r\nconst colours = [\r\n  Colours.RED,\r\n  Colours.YELLOW,\r\n  Colours.BLUE,\r\n  Colours.GREEN,\r\n  Colours.PINK\r\n];\r\n\r\nclass Health {\r\n  private lifes: number = 5;\r\n  private images: Phaser.GameObjects.Image[] = [];\r\n\r\n  public create() {\r\n    this.renderImages();\r\n  }\r\n\r\n  public injure = () => {\r\n    window.scene.sound.play(Sound.BAD);\r\n\r\n    this.lifes--;\r\n    if (this.lifes > 0) {\r\n      this.renderImages();\r\n    }\r\n\r\n    if (this.lifes === 0) {\r\n      window.scene.scene.start(\"End\");\r\n    }\r\n  };\r\n\r\n  private renderImages = () => {\r\n    this.images.forEach(i => i.destroy());\r\n    [...Array(this.lifes)].forEach((life, index) => {\r\n      this.images.push(\r\n        window.scene.add\r\n          .image(\r\n            this.getTextXPosition() - index * 30,\r\n            GAME_HEIGHT - CELL_SIZE / 2,\r\n            Images.VIMBOY\r\n          )\r\n          .setTint(colours[index])\r\n          .setFrame(HEART_FRAME)\r\n      );\r\n    });\r\n  };\r\n\r\n  private getTextXPosition = () => GAME_WIDTH - 20;\r\n}\r\n\r\nexport default Health;\r\n","import Entity, { EntityType, Enemy } from \"../Entity\";\r\nimport {\r\n  CELL_SIZE,\r\n  GAME_WIDTH,\r\n  PLAY_ZONE_HEIGHT\r\n} from \"../../../constants/game\";\r\nimport Random from \"../../utils/Random\";\r\nimport { GameObjects } from \"phaser\";\r\nimport { createText } from \"../helpers/TextCreator\";\r\nimport { playClashAnimation } from \"../../utils/animationPlayer\";\r\nimport { Sound } from \"../../loaders/SoundLoader\";\r\n\r\nconst numberOfGaps = PLAY_ZONE_HEIGHT / CELL_SIZE;\r\n\r\nconst createWordTypeEnemy = (\r\n  words: string[] = Random.getWords(),\r\n  line: number = Random.getNumber(numberOfGaps),\r\n  velocity: number = -CELL_SIZE * 3,\r\n  x: number = GAME_WIDTH\r\n): Phaser.GameObjects.GameObject | undefined => {\r\n  if (window.scene.entityManager.lineHasEnemy(line)) {\r\n    return undefined;\r\n  }\r\n  const y = line * CELL_SIZE;\r\n\r\n  const text = createText({\r\n    x,\r\n    y,\r\n    word: words.join(\"\"),\r\n    xVelocity: velocity,\r\n    colour: Random.getStringColour()\r\n  });\r\n\r\n  const entity: Enemy = {\r\n    line,\r\n    type: EntityType.WORD_TYPE_ENEMY,\r\n    onCollision: (entity, gameObject) => onCollision(text, entity, gameObject),\r\n    words,\r\n    normalVelocity: velocity\r\n  };\r\n\r\n  text.setData({ data: entity });\r\n  return text;\r\n};\r\n\r\nexport default createWordTypeEnemy;\r\n\r\nconst onCollision = (\r\n  text: GameObjects.Text,\r\n  entity: Entity,\r\n  gameObject: GameObjects.GameObject\r\n) => {\r\n  switch (entity.type) {\r\n    case EntityType.WORD_ATTACK:\r\n      const attackObject = gameObject as GameObjects.Text;\r\n      const enemyText = text.text.toLowerCase().trim();\r\n      const enemyTextFirstChar = enemyText.charAt(0);\r\n      if (attackObject.text.toLowerCase() === enemyTextFirstChar) {\r\n        window.scene.sound.play(Sound.BOOP);\r\n        if (text.text.length === 1) {\r\n          window.scene.entityManager.destroyEnemy(text);\r\n        } else {\r\n          text.setText(enemyText.substr(1));\r\n          window.scene.scoreBoard.updateScore(1);\r\n        }\r\n      }\r\n      playClashAnimation(attackObject.x, attackObject.y + CELL_SIZE / 2);\r\n\r\n      window.scene.entityManager.destroyNonEnemy(attackObject);\r\n  }\r\n};\r\n","import { GAME_WIDTH, CELL_SIZE, GAP_COUNT } from \"../../../constants/game\";\r\nimport { enableBody, setVelocity } from \"../helpers/BodyCreator\";\r\nimport { EntityType, Pickup } from \"../Entity\";\r\nimport { Images, PRESENT_FRAME } from \"../../loaders/ImageLoader\";\r\nimport Random from \"../../utils/Random\";\r\n\r\nconst createPickup = (\r\n  xVelocity: number = -CELL_SIZE * 4,\r\n  line: number = Random.getNumber(GAP_COUNT)\r\n) => {\r\n  if (window.scene.entityManager.getNonEnemyOnLine(line)) {\r\n    return undefined;\r\n  }\r\n\r\n  const y = line * CELL_SIZE - CELL_SIZE / 2;\r\n  const colour = Random.getColour();\r\n\r\n  const image = window.scene.add\r\n    .sprite(GAME_WIDTH + 200, y, Images.VIMBOY)\r\n    .setTint(colour)\r\n    .setFrame(PRESENT_FRAME);\r\n\r\n  const body = enableBody(image);\r\n  setVelocity(body, xVelocity);\r\n\r\n  const entity: Pickup = {\r\n    line,\r\n    type: EntityType.PICKUP,\r\n    colour,\r\n    normalVelocity: xVelocity\r\n  };\r\n\r\n  image.setData({ data: entity });\r\n\r\n  return image;\r\n};\r\n\r\nexport default createPickup;\r\n","import Phaser, { GameObjects, Physics } from \"phaser\";\r\nimport Entity, { Enemy } from \"./Entity\";\r\nimport createWordTypeEnemy from \"./enemies/WordTypeEnemy\";\r\nimport Random from \"../utils/Random\";\r\nimport { GAME_WIDTH, CELL_SIZE } from \"../../constants/game\";\r\nimport createPickup from \"./pickups/EntityPickup\";\r\n\r\nclass EntityManager {\r\n  private enemies?: GameObjects.Group;\r\n  private nonEnemies?: GameObjects.Group;\r\n  private generationPaused: boolean = false;\r\n\r\n  public create = () => {\r\n    this.enemies = window.scene.add.group();\r\n    this.nonEnemies = window.scene.add.group();\r\n\r\n    window.scene.physics.add.overlap(\r\n      this.nonEnemies,\r\n      this.enemies,\r\n      this.onCollision\r\n    );\r\n\r\n    window.scene.physics.add.overlap(\r\n      window.scene.vimboy.vimboy!,\r\n      this.enemies,\r\n      window.scene.vimboy.onEnemyCollision\r\n    );\r\n\r\n    window.scene.physics.add.overlap(\r\n      window.scene.vimboy.vimboy!,\r\n      this.nonEnemies,\r\n      window.scene.vimboy.onPickupCollision\r\n    );\r\n  };\r\n\r\n  private onCollision = (\r\n    nonEnemy: Phaser.GameObjects.GameObject,\r\n    enemy: Phaser.GameObjects.GameObject\r\n  ) => {\r\n    const enemyEntity = enemy.getData(\"data\") as Enemy;\r\n    const nonEnemyEntity = nonEnemy.getData(\"data\") as Entity;\r\n    if (enemyEntity.line !== nonEnemyEntity.line) {\r\n      return;\r\n    }\r\n    enemyEntity.onCollision(nonEnemyEntity, nonEnemy);\r\n  };\r\n\r\n  public createEnemy(creator: () => GameObjects.GameObject | undefined) {\r\n    const obj = creator();\r\n    if (obj) {\r\n      this.enemies!.add(obj);\r\n    }\r\n  }\r\n\r\n  public createNonEnemy(creator: () => GameObjects.GameObject | undefined) {\r\n    const obj = creator();\r\n    if (obj) {\r\n      this.nonEnemies!.add(obj);\r\n    }\r\n  }\r\n\r\n  public update() {\r\n    if (!this.generationPaused) {\r\n      this.generate();\r\n    }\r\n\r\n    this.enemies!.children.each(this.cleanup);\r\n    this.nonEnemies!.children.each(this.cleanup);\r\n  }\r\n\r\n  public pauseRandomGeneration() {\r\n    this.generationPaused = true;\r\n  }\r\n\r\n  public unpauseRandomGeneration() {\r\n    this.generationPaused = false;\r\n  }\r\n\r\n  private generate() {\r\n    const randomNumber = Random.getNumber(300);\r\n    if (randomNumber === 1 || this.enemies!.getChildren().length < 3) {\r\n      this.createEnemy(createWordTypeEnemy);\r\n    }\r\n\r\n    if (randomNumber === 2 || this.nonEnemies!.getChildren().length < 1) {\r\n      this.createNonEnemy(createPickup);\r\n    }\r\n  }\r\n\r\n  public lineHasEnemy = (line: number): boolean => {\r\n    const enemy = this.getFirstWordOnLine(line);\r\n    return enemy !== undefined;\r\n  };\r\n\r\n  public lineHasNonEnemy = (line: number): boolean => {\r\n    const enemy = this.getNonEnemyOnLine(line);\r\n    return enemy !== undefined;\r\n  };\r\n\r\n  public getEnemiesAboveLine(line: number): Array<GameObjects.GameObject> {\r\n    return this.enemies!.getChildren().filter(\r\n      enemy => (enemy.getData(\"data\") as Entity).line < line\r\n    );\r\n  }\r\n\r\n  public getFirstWordOnLine = (line: number): GameObjects.Text | undefined =>\r\n    this.getOnLine(line, this.enemies!) as any;\r\n\r\n  public getNonEnemyOnLine = (\r\n    line: number\r\n  ): GameObjects.GameObject | undefined =>\r\n    this.getOnLine(line, this.nonEnemies!);\r\n\r\n  private getOnLine = (\r\n    line: number,\r\n    group: GameObjects.Group\r\n  ): GameObjects.GameObject | undefined => {\r\n    var word = undefined;\r\n    group.children.each(c => {\r\n      const enemy = c.getData(\"data\") as Entity;\r\n\r\n      if (enemy.line === line) {\r\n        word = c;\r\n      }\r\n    });\r\n    return word;\r\n  };\r\n\r\n  private cleanup = (obj: GameObjects.GameObject) => {\r\n    const body = obj.body as Phaser.Physics.Arcade.Body;\r\n\r\n    if (body.x < 0 - GAME_WIDTH || body.x > GAME_WIDTH + 200) {\r\n      this.destroyEnemy(obj);\r\n    }\r\n  };\r\n\r\n  public destroyAll() {\r\n    this.enemies!.children.each(this.destroyEnemy);\r\n    this.nonEnemies!.children.each(this.destroyNonEnemy);\r\n  }\r\n\r\n  public destroyEnemy = (obj: GameObjects.GameObject) => {\r\n    obj.destroy();\r\n    this.enemies!.remove(obj);\r\n  };\r\n\r\n  public destroyNonEnemy = (obj: GameObjects.GameObject) => {\r\n    obj.destroy();\r\n    this.nonEnemies!.remove(obj);\r\n  };\r\n\r\n  public getEnemies(): Array<GameObjects.GameObject> {\r\n    return this.enemies!.getChildren();\r\n  }\r\n\r\n  public moveEverythingRight = () => {\r\n    this.applyToAll(c => {\r\n      c.setX(c.x + CELL_SIZE);\r\n    });\r\n  };\r\n\r\n  public moveEverythingLeft = () => {\r\n    this.applyToAll(c => {\r\n      c.setX(c.x - CELL_SIZE);\r\n    });\r\n  };\r\n\r\n  public matchToTimescale = () => {\r\n    this.applyToAll((_, body, entity) => {\r\n      body.setVelocityX(\r\n        entity.normalVelocity * window.scene.tweens.getGlobalTimeScale()\r\n      );\r\n    });\r\n  };\r\n\r\n  private applyToAll = (\r\n    cb: (\r\n      child: GameObjects.Text | GameObjects.Sprite,\r\n      body: Physics.Arcade.Body,\r\n      entity: Entity\r\n    ) => void\r\n  ) => {\r\n    if (this.enemies) {\r\n      this.enemies.getChildren().forEach(c => {\r\n        const text = c as GameObjects.Text;\r\n        const body = c.body as Physics.Arcade.Body;\r\n        const entity = c.getData(\"data\") as Entity;\r\n        cb(text, body, entity);\r\n      });\r\n    }\r\n\r\n    if (this.nonEnemies) {\r\n      this.nonEnemies.getChildren().forEach(c => {\r\n        const sprite = c as GameObjects.Sprite;\r\n        const body = c.body as Physics.Arcade.Body;\r\n        const entity = c.getData(\"data\") as Entity;\r\n        cb(sprite, body, entity);\r\n      });\r\n    }\r\n  };\r\n}\r\n\r\nexport default EntityManager;\r\n","import { Images, POWER_UP_FOUND_FRAME } from \"./loaders/ImageLoader\";\r\nimport { GAME_WIDTH, GAME_HEIGHT, CELL_SIZE } from \"../constants/game\";\r\nimport { GameObjects } from \"phaser\";\r\nimport { FONT } from \"../constants/text\";\r\nimport { StringColours, Colours } from \"../constants/colours\";\r\nimport Random from \"./utils/Random\";\r\nimport { playTextFlash, playClashAnimation } from \"./utils/animationPlayer\";\r\nimport { Verb, Noun } from \"../constants/verbsAndNouns\";\r\nimport { Sound } from \"./loaders/SoundLoader\";\r\n\r\nclass PowerUpManager {\r\n  private verbs: Phaser.GameObjects.Group[] = [];\r\n  private nouns: Phaser.GameObjects.Group[] = [];\r\n\r\n  private selectedVerb?: Phaser.GameObjects.Group;\r\n  private selectedNoun?: Phaser.GameObjects.Group;\r\n\r\n  public presetVerb?: Verb;\r\n  public presetNoun?: Noun;\r\n\r\n  public addPowerUp = (colour: number) => {\r\n    if (Random.randomBool()) {\r\n      const verb = this.presetVerb || Random.randomStringEnum(Verb);\r\n      this.drawPowerUp(colour, this.verbs, verb);\r\n    } else {\r\n      const noun = this.presetNoun || Random.randomStringEnum(Noun);\r\n      this.drawPowerUp(colour, this.nouns, noun);\r\n    }\r\n  };\r\n\r\n  private drawPowerUp = (\r\n    colour: number,\r\n    list: Phaser.GameObjects.Group[],\r\n    thing: Verb | Noun\r\n  ) => {\r\n    if (list.length === 6) {\r\n      const powerUpToKill = list.shift();\r\n      powerUpToKill!.destroy(true);\r\n    }\r\n\r\n    const powerUp = window.scene.add\r\n      .sprite(0, spriteY, Images.VIMBOY)\r\n      .setFrame(POWER_UP_FOUND_FRAME);\r\n    const label = window.scene.add.text(0, labelY, thing, textConfig);\r\n\r\n    powerUp.setTint(colour);\r\n    powerUp.setData(\"powerUp\", thing);\r\n    powerUp.setData(\"colour\", colour);\r\n\r\n    const group = window.scene.add.group([powerUp, label]);\r\n    list.push(group);\r\n    this.refreshGroupPositioning();\r\n  };\r\n\r\n  public canUsePowerUp = (verb: Verb, noun: Noun): boolean =>\r\n    this.selectedVerb !== undefined &&\r\n    this.getFromGroup(this.selectedVerb).sprite.getData(\"data\") === verb &&\r\n    this.selectedNoun !== undefined &&\r\n    this.getFromGroup(this.selectedNoun).sprite.getData(\"data\") === noun;\r\n\r\n  public setVerbIfAvailable(verb: Verb) {\r\n    this.selectedVerb = this.useItemAndCreateSelected(\r\n      verb,\r\n      this.verbs,\r\n      GAME_WIDTH / 2 - CELL_SIZE + 2\r\n    );\r\n  }\r\n\r\n  public setNounIfAvailable(noun: Noun) {\r\n    this.selectedNoun = this.useItemAndCreateSelected(\r\n      noun,\r\n      this.nouns,\r\n      GAME_WIDTH / 2 + CELL_SIZE - 2\r\n    );\r\n  }\r\n\r\n  private useItemAndCreateSelected(\r\n    thing: Verb | Noun,\r\n    list: Phaser.GameObjects.Group[],\r\n    x: number\r\n  ) {\r\n    const index = this.findThingIndex(thing, list);\r\n\r\n    if (index !== -1) {\r\n      const obj = list[index];\r\n      const colour = this.getFromGroup(obj).sprite.getData(\"colour\");\r\n\r\n      obj.destroy(true);\r\n      list.splice(index, 1);\r\n      this.refreshGroupPositioning();\r\n      const powerUp = window.scene.add.sprite(x, spriteY, Images.VIMBOY);\r\n      powerUp.setTint(colour);\r\n      powerUp.setData(\"data\", thing);\r\n      powerUp.setFrame(POWER_UP_FOUND_FRAME);\r\n\r\n      const label = this.addLabel(x, thing);\r\n      return window.scene.add.group([powerUp, label]);\r\n    }\r\n  }\r\n\r\n  public clear() {\r\n    if (this.selectedVerb) {\r\n      window.scene.sound.play(Sound.BAD);\r\n      this.clearUsedSelected(this.selectedVerb);\r\n    }\r\n    if (this.selectedNoun) {\r\n      this.clearUsedSelected(this.selectedNoun);\r\n    }\r\n    this.selectedVerb = undefined;\r\n    this.selectedNoun = undefined;\r\n  }\r\n\r\n  private clearUsedSelected = (selected: GameObjects.Group) => {\r\n    const { sprite } = this.getFromGroup(selected);\r\n    playClashAnimation(sprite.x, sprite.y);\r\n    sprite.setTint(Colours.PINK);\r\n\r\n    window.scene.time.addEvent({\r\n      delay: 500,\r\n      callback: () => {\r\n        selected.destroy(true);\r\n      }\r\n    });\r\n  };\r\n\r\n  public unusedClear() {\r\n    if (this.selectedNoun) {\r\n      this.clearUnusedSelected(this.selectedNoun);\r\n    }\r\n    if (this.selectedVerb) {\r\n      this.clearUnusedSelected(this.selectedVerb);\r\n    }\r\n    this.selectedVerb = undefined;\r\n    this.selectedNoun = undefined;\r\n  }\r\n\r\n  private clearUnusedSelected = (selected: GameObjects.Group) => {\r\n    const { sprite } = this.getFromGroup(selected);\r\n    sprite.setTint(Colours.RED);\r\n    window.scene.time.addEvent({\r\n      delay: 500,\r\n      callback: () => {\r\n        selected.destroy(true);\r\n      }\r\n    });\r\n  };\r\n\r\n  public use(name: string) {\r\n    playTextFlash(CELL_SIZE, GAME_HEIGHT - CELL_SIZE, name);\r\n    window.scene.time.addEvent({\r\n      delay: 500,\r\n      callback: () => {\r\n        this.clear();\r\n      }\r\n    });\r\n  }\r\n\r\n  public hasVerb = () => this.selectedVerb !== undefined;\r\n\r\n  private findThingIndex = <Thing>(\r\n    thing: Thing,\r\n    list: Phaser.GameObjects.Group[]\r\n  ): number =>\r\n    list.findIndex(g => {\r\n      const { sprite } = this.getFromGroup(g);\r\n      const foundPowerUp = sprite.getData(\"powerUp\") as Thing;\r\n      if (foundPowerUp === thing) {\r\n        return true;\r\n      }\r\n      return false;\r\n    });\r\n\r\n  private refreshGroupPositioning = () => {\r\n    this.verbs.forEach((g, i) =>\r\n      this.updateX(g, GAME_WIDTH / 2 - i * CELL_SIZE - CELL_SIZE * 3)\r\n    );\r\n\r\n    this.nouns.forEach((g, i) =>\r\n      this.updateX(g, GAME_WIDTH / 2 + i * CELL_SIZE + CELL_SIZE * 3)\r\n    );\r\n  };\r\n\r\n  private updateX = (g: GameObjects.Group, x: number) => {\r\n    const { sprite, text } = this.getFromGroup(g);\r\n\r\n    sprite.setX(x);\r\n    text.setX(this.getTextXPosition(x));\r\n  };\r\n\r\n  private getTextXPosition = (spritePositionX: number) =>\r\n    spritePositionX - CELL_SIZE / 2 + 5;\r\n\r\n  private addLabel = (x: number, label: string) =>\r\n    window.scene.add.text(this.getTextXPosition(x), labelY, label, textConfig);\r\n\r\n  private getFromGroup = (g: GameObjects.Group) => {\r\n    const sprite = g.getChildren()[0] as GameObjects.Sprite;\r\n    const text = g.getChildren()[1] as GameObjects.Text;\r\n    return { sprite, text };\r\n  };\r\n\r\n  public create() {\r\n    this.presetVerb = undefined;\r\n    this.presetNoun = undefined;\r\n    window.scene.add.sprite(\r\n      GAME_WIDTH / 2,\r\n      GAME_HEIGHT - CELL_SIZE * 1.5,\r\n      Images.POWER_UP_CONTAINER\r\n    );\r\n  }\r\n\r\n  public update() {}\r\n\r\n  public hasVerbs = () => this.verbs.length > 0;\r\n  public hasNouns = () => this.nouns.length > 0;\r\n}\r\n\r\nconst spriteY = GAME_HEIGHT - CELL_SIZE * 1.5;\r\nconst labelY = GAME_HEIGHT - CELL_SIZE * 2 + 5;\r\nconst textConfig = {\r\n  fontFamily: FONT,\r\n  fontSize: 30,\r\n  align: \"center\",\r\n  fixedWidth: CELL_SIZE - 10,\r\n  color: StringColours.WHITE\r\n};\r\n\r\nexport default PowerUpManager;\r\n","import { Sound } from \"./loaders/SoundLoader\";\r\n\r\nclass MusicManager {\r\n  private music?: Phaser.Sound.HTML5AudioSound;\r\n  public create() {\r\n    window.scene.sound.stopAll();\r\n\r\n    this.music = window.scene.sound.add(Sound.MUSIC, {\r\n      loop: true,\r\n      volume: 0.5\r\n    }) as Phaser.Sound.HTML5AudioSound;\r\n    this.music.play();\r\n  }\r\n}\r\n\r\nexport default MusicManager;\r\n","import createPickup from \"../entities/pickups/EntityPickup\";\r\n\r\nimport { CELL_SIZE, GAP_COUNT } from \"../../constants/game\";\r\n\r\nimport createWordTypeEnemy from \"../entities/enemies/WordTypeEnemy\";\r\nimport Random from \"../utils/Random\";\r\n\r\nexport const generatePresent = () => {\r\n  window.scene.entityManager.createNonEnemy(() =>\r\n    createPickup(-CELL_SIZE * 8, Random.getRandomInt(5, GAP_COUNT))\r\n  );\r\n};\r\n\r\nexport const generateEnemy = (\r\n  n: number = Random.getRandomInt(5, GAP_COUNT)\r\n) => {\r\n  printWord([\"boom\"], n);\r\n};\r\n\r\nexport const printWord = (words: string[], line?: number, x?: number) => {\r\n  window.scene.entityManager.createEnemy(() =>\r\n    createWordTypeEnemy(words, line, -CELL_SIZE * 10, x)\r\n  );\r\n};\r\n\r\nexport const genericInputUpdater = (\r\n  keyEvent: KeyboardEvent,\r\n  input: string,\r\n  updateInput: (s: string) => void\r\n) => {\r\n  if (keyEvent.key.toLowerCase() === \"enter\") {\r\n    updateInput(\"\");\r\n  } else {\r\n    updateInput(input + keyEvent.key.toLowerCase());\r\n  }\r\n};\r\n\r\nexport const printText = (text: string[]) => {\r\n  text.forEach((text, index) => {\r\n    window.scene.time.addEvent({\r\n      delay: index * 1000,\r\n      callback: () => {\r\n        printWord([text], index);\r\n      }\r\n    });\r\n  });\r\n};\r\n","import {\r\n  generatePresent,\r\n  genericInputUpdater,\r\n  generateEnemy\r\n} from \"./tutorialUtils\";\r\nimport { Step } from \"./Tutorial\";\r\nimport { alphabet } from \"../../constants/alphabet\";\r\n\r\nconst steps: Step[] = [\r\n  {\r\n    text: [\"Hey there!\", \"Try hitting 'k' to move up a line!\"],\r\n    keysToEnable: [\"k\"],\r\n    shouldRunNextStep: keyEvent => keyEvent.key.toLowerCase() === \"k\",\r\n    type: \"KeyBind\"\r\n  },\r\n  {\r\n    text: [\"Nice! Now try j to move down\"],\r\n    keysToEnable: [\"j\"],\r\n    shouldRunNextStep: keyEvent => keyEvent.key.toLowerCase() === \"j\",\r\n    type: \"KeyBind\"\r\n  },\r\n  {\r\n    text: [\r\n      \"Cool! Try and pick up some presents\",\r\n      \"You can also use 'h' and 'l' to move left and right\"\r\n    ],\r\n    keysToEnable: [\"h\", \"l\"],\r\n    type: \"Update\",\r\n    onUpdate: () => generatePresent(),\r\n    shouldRunNextStep: () =>\r\n      window.scene.powerUpManager.hasNouns() &&\r\n      window.scene.powerUpManager.hasVerbs()\r\n  },\r\n  {\r\n    text: [\r\n      \"Next up is commands!\",\r\n      \"Typing a colon will enter you into command mode.\"\r\n    ],\r\n    keysToEnable: [\"Shift:\", \"Shift\", \":\"],\r\n    type: \"KeyBind\",\r\n    shouldRunNextStep: (keyEvent, input) => keyEvent.key === \":\",\r\n    onNonKeyMatch: genericInputUpdater\r\n  },\r\n  {\r\n    text: [\r\n      \"Following it with a number will let you jump to that line!\",\r\n      \"Give it a go! e.g. ':6' and hit enter\"\r\n    ],\r\n    keysToEnable: [\r\n      \"Enter\",\r\n      ...Array.from(Array(10).keys()).map(v => v.toString())\r\n    ],\r\n    type: \"KeyBind\",\r\n    shouldRunNextStep: (keyEvent, input) =>\r\n      keyEvent.key.toLowerCase() === \"enter\" && input.match(/:[0-9]+/) !== null,\r\n    onNonKeyMatch: genericInputUpdater\r\n  },\r\n  {\r\n    text: [\r\n      \"Theres lots of commands so feel free to try different things!\",\r\n      \"Now lets make use of those presents\",\r\n      \"They can be either a verb or noun\",\r\n      \"Combine them to attack enemies by typing the letters on them\",\r\n      \"Try using the ones you picked up!\"\r\n    ],\r\n    type: \"Update\",\r\n    onUpdate: () => {\r\n      generatePresent();\r\n      generateEnemy();\r\n    },\r\n    shouldRunNextStep: () => window.scene.scoreBoard.score > 0,\r\n    keysToEnable: [\"d\"]\r\n  },\r\n  {\r\n    text: [\"Next up is modes\", \"You can switch to insert mode by hitting 'i'\"],\r\n    keysToEnable: [\"i\"],\r\n    type: \"KeyBind\",\r\n    shouldRunNextStep: key => key.key.toLowerCase() === \"i\",\r\n    extra: () => window.scene.scoreBoard.resetScore()\r\n  },\r\n  {\r\n    text: [\r\n      \"Now you're in insert mode\",\r\n      \"In this mode you can insert characters to attack\",\r\n      \"try typing things and destroy some letters\"\r\n    ],\r\n    onUpdate: () => {\r\n      generateEnemy(window.scene.vimboy.currentLine() - 1);\r\n    },\r\n    keysToEnable: alphabet,\r\n    type: \"Update\",\r\n    shouldRunNextStep: () => window.scene.scoreBoard.score > 0\r\n  },\r\n  {\r\n    text: [\"Nice! Try switching back to normal mode\", \"by hitting 'escape'\"],\r\n    keysToEnable: [\"escape\"],\r\n    shouldRunNextStep: keyEvent => keyEvent.key.toLowerCase() === \"escape\",\r\n    type: \"KeyBind\"\r\n  }\r\n];\r\n\r\nexport default steps;\r\n","import { printText } from \"./tutorialUtils\";\r\nimport steps from \"./tutorialSteps\";\r\n\r\nclass Tutorial {\r\n  private index: number = 0;\r\n  private input: string = \"\";\r\n  constructor(private endTutorial: () => void) {}\r\n\r\n  public start() {\r\n    window.scene.entityManager.pauseRandomGeneration();\r\n    this.runNext();\r\n  }\r\n\r\n  public update() {\r\n    this.funToRun();\r\n  }\r\n\r\n  private funToRun = () => {};\r\n\r\n  private runNext = (previousBoundFn?: (keyEvent: KeyboardEvent) => void) => {\r\n    this.unbind(previousBoundFn);\r\n    this.funToRun = () => {};\r\n\r\n    const step = steps[this.index];\r\n    const { text, keysToEnable, extra } = step;\r\n    printText(text);\r\n\r\n    keysToEnable.forEach(k => {\r\n      window.scene.modeManager.allow(k);\r\n    });\r\n\r\n    if (step.type === \"KeyBind\") {\r\n      this.handleKeybind(step);\r\n    }\r\n\r\n    if (step.type === \"Update\") {\r\n      this.funToRun = () => {\r\n        step.onUpdate();\r\n        if (step.shouldRunNextStep()) {\r\n          this.nextOrEnd();\r\n        }\r\n      };\r\n    }\r\n\r\n    if (extra) {\r\n      extra();\r\n    }\r\n  };\r\n\r\n  private updateInput = (str: string) => {\r\n    this.input = str;\r\n  };\r\n\r\n  private handleKeybind = ({\r\n    shouldRunNextStep,\r\n    onNonKeyMatch\r\n  }: KeyBindStep) => {\r\n    const onKeyDown = (keyEvent: KeyboardEvent) => {\r\n      if (shouldRunNextStep && shouldRunNextStep(keyEvent, this.input)) {\r\n        this.nextOrEnd(onKeyDown);\r\n      } else if (onNonKeyMatch) {\r\n        onNonKeyMatch(keyEvent, this.input, this.updateInput);\r\n      }\r\n    };\r\n    window.scene.keyCapturer!.addListener(\"keydown\", onKeyDown);\r\n  };\r\n\r\n  private nextOrEnd = (previousBoundFn?: (keyEvent: KeyboardEvent) => void) => {\r\n    window.scene.entityManager.destroyAll();\r\n    if (this.index !== steps.length - 1) {\r\n      this.index++;\r\n      this.runNext(previousBoundFn);\r\n    } else {\r\n      this.funToRun = () => {};\r\n      this.unbind(previousBoundFn);\r\n      this.endTutorial();\r\n    }\r\n  };\r\n\r\n  private unbind = (previousBoundFn?: (keyEvent: KeyboardEvent) => void) => {\r\n    if (previousBoundFn) {\r\n      window.scene.keyCapturer!.removeListener(\"keydown\", previousBoundFn);\r\n    }\r\n  };\r\n}\r\n\r\ninterface BaseStep {\r\n  keysToEnable: string[];\r\n  text: string[];\r\n  extra?: () => void;\r\n}\r\n\r\ninterface KeyBindStep extends BaseStep {\r\n  shouldRunNextStep: (keyEvent: KeyboardEvent, input: string) => boolean;\r\n  type: \"KeyBind\";\r\n  onNonKeyMatch?: (\r\n    keyEvent: KeyboardEvent,\r\n    update: string,\r\n    updateInput: (newInput: string) => void\r\n  ) => void;\r\n}\r\n\r\ninterface UpdateStep extends BaseStep {\r\n  shouldRunNextStep: () => boolean;\r\n  onUpdate: () => void;\r\n  type: \"Update\";\r\n}\r\n\r\nexport type Step = KeyBindStep | UpdateStep;\r\n\r\nexport default Tutorial;\r\n","import Tutorial from \"./Tutorial\";\r\nimport { Verb, Noun } from \"../../constants/verbsAndNouns\";\r\nimport { printText } from \"./tutorialUtils\";\r\n\r\nclass TutorialManager {\r\n  private tutorial!: Tutorial;\r\n\r\n  public create() {\r\n    if (window.tutorialMode) {\r\n      this.tutorial = new Tutorial(this.onComplete);\r\n      window.scene.modeManager.allowNone();\r\n      window.scene.vimboy.setBulletProof(true);\r\n      window.scene.powerUpManager.presetVerb = Verb.d;\r\n      window.scene.powerUpManager.presetNoun = Noun.d;\r\n      this.tutorial.start();\r\n    }\r\n  }\r\n\r\n  private onComplete = () => {\r\n    printText([\r\n      \"Congrats thats the tutorial done\",\r\n      \"Type :q to go back to main menu\",\r\n      \"Or you can hang around here :)\"\r\n    ]);\r\n    window.tutorialMode = false;\r\n  };\r\n\r\n  public update() {\r\n    if (window.tutorialMode) {\r\n      this.tutorial.update();\r\n    }\r\n  }\r\n}\r\n\r\nexport default TutorialManager;\r\n","import Phaser from \"phaser\";\r\n\r\nimport Background from \"../Background\";\r\nimport VimBoy from \"../VimBoy\";\r\nimport ModeManager from \"../ModeManager\";\r\nimport StatusLine from \"../StatusLine\";\r\nimport ScoreBoard from \"../ScoreBoard\";\r\nimport Health from \"../Health\";\r\nimport preloadImages from \"../loaders/ImageLoader\";\r\nimport { loadAnimations } from \"../loaders/AnimationLoader\";\r\nimport EntityManager from \"../entities/EntityManager\";\r\nimport PowerUpManager from \"../PowerUpManager\";\r\nimport preloadSounds from \"../loaders/SoundLoader\";\r\nimport MusicManager from \"../MusicManager\";\r\nimport TutorialManager from \"../tutorial/TutorialManager\";\r\n\r\nconst sceneConfig: Phaser.Types.Scenes.SettingsConfig = {\r\n  active: false,\r\n  visible: false,\r\n  key: \"Game\"\r\n};\r\n\r\nexport class PlayScene extends Phaser.Scene {\r\n  public vimboy!: VimBoy;\r\n  public modeManager!: ModeManager;\r\n  public statusLine!: StatusLine;\r\n  public scoreBoard!: ScoreBoard;\r\n  public health!: Health;\r\n  public entityManager!: EntityManager;\r\n  public powerUpManager!: PowerUpManager;\r\n  public musicManager!: MusicManager;\r\n  public keyCapturer?: Phaser.Input.Keyboard.KeyboardPlugin;\r\n  public graphics?: Phaser.GameObjects.Graphics;\r\n  public tutorialManager!: TutorialManager;\r\n\r\n  constructor() {\r\n    super(sceneConfig);\r\n    window.scene = this;\r\n    this.init();\r\n  }\r\n\r\n  public preload(): void {\r\n    preloadImages();\r\n    preloadSounds();\r\n  }\r\n\r\n  public create() {\r\n    this.init();\r\n    loadAnimations();\r\n    this.keyCapturer = window.scene.input.keyboard.addCapture([\r\n      Phaser.Input.Keyboard.KeyCodes.I\r\n    ]); // I is a lie, it captures all keys\r\n\r\n    this.graphics = this.add.graphics({ x: 0, y: 0 });\r\n\r\n    const background = new Background(this.graphics);\r\n\r\n    background.drawBackground();\r\n\r\n    this.vimboy.create();\r\n    this.modeManager.create();\r\n    this.statusLine.create();\r\n    this.health.create();\r\n    this.scoreBoard.create();\r\n    this.entityManager.create();\r\n    this.powerUpManager.create();\r\n    this.musicManager.create();\r\n    this.tutorialManager.create();\r\n  }\r\n\r\n  public update() {\r\n    this.vimboy.update();\r\n    this.modeManager.update();\r\n    this.statusLine!.update();\r\n    this.entityManager.update();\r\n    this.powerUpManager.update();\r\n    this.tutorialManager.update();\r\n  }\r\n\r\n  private init() {\r\n    this.vimboy = new VimBoy();\r\n    this.modeManager = new ModeManager();\r\n    this.scoreBoard = new ScoreBoard();\r\n    this.health = new Health();\r\n    this.statusLine = new StatusLine();\r\n    this.entityManager = new EntityManager();\r\n    this.powerUpManager = new PowerUpManager();\r\n    this.musicManager = new MusicManager();\r\n    this.tutorialManager = new TutorialManager();\r\n  }\r\n}\r\n","import Phaser, { GameObjects } from \"phaser\";\r\nimport { Images } from \"../loaders/ImageLoader\";\r\nimport { GAME_WIDTH, GAME_HEIGHT, CELL_SIZE } from \"../../constants/game\";\r\nimport { Sound } from \"../loaders/SoundLoader\";\r\nimport { FONT, FONT_SIZE, FONT_CONFIG } from \"../../constants/text\";\r\nimport { StringColours } from \"../../constants/colours\";\r\n\r\nconst sceneConfig: Phaser.Types.Scenes.SettingsConfig = {\r\n  active: false,\r\n  visible: false,\r\n  key: \"End\"\r\n};\r\n\r\nconst goodScore = 100;\r\n\r\nexport class End extends Phaser.Scene {\r\n  private replayButton?: GameObjects.Text;\r\n  private menuButton?: GameObjects.Text;\r\n  private replaySelected: boolean = true;\r\n  constructor() {\r\n    super(sceneConfig);\r\n  }\r\n\r\n  public preload(): void {}\r\n\r\n  public create() {\r\n    this.sound.stopAll();\r\n    const score = window.scene.scoreBoard.score;\r\n    if (score >= goodScore) {\r\n      this.sound.play(Sound.GOOD_SCORE);\r\n      this.renderImage(Images.TROPHY, false);\r\n      this.renderText(\"Wow!\");\r\n    } else {\r\n      this.sound.play(Sound.DEATH);\r\n      this.renderImage(Images.GHOST, true);\r\n      this.renderText(\"Better luck next time!\");\r\n    }\r\n\r\n    this.replayButton = this.add.text(0, (3 * GAME_HEIGHT) / 4, \"> Replay\", {\r\n      ...FONT_CONFIG,\r\n      align: \"center\",\r\n      fixedWidth: GAME_WIDTH / 2,\r\n      color: StringColours.YELLOW\r\n    });\r\n    this.menuButton = this.add.text(\r\n      GAME_WIDTH / 2,\r\n      (3 * GAME_HEIGHT) / 4,\r\n      \"  Menu\",\r\n      {\r\n        ...FONT_CONFIG,\r\n        align: \"center\",\r\n        fixedWidth: GAME_WIDTH / 2\r\n      }\r\n    );\r\n\r\n    this.input.keyboard.on(\"keydown\", (keyEvent: KeyboardEvent) => {\r\n      switch (keyEvent.key.toLowerCase()) {\r\n        case \"arrowleft\":\r\n        case \"h\":\r\n          this.replaySelected = true;\r\n          this.replayButton!.setText(\"> Replay\");\r\n          this.replayButton!.setColor(StringColours.YELLOW);\r\n          this.menuButton!.setText(\"  Menu\");\r\n          this.menuButton!.setColor(StringColours.WHITE);\r\n          break;\r\n        case \"arrowright\":\r\n        case \"l\":\r\n          this.replaySelected = false;\r\n          this.menuButton!.setText(\"> Menu\");\r\n          this.menuButton!.setColor(StringColours.YELLOW);\r\n          this.replayButton!.setColor(StringColours.WHITE);\r\n          this.replayButton!.setText(\"  Replay\");\r\n          break;\r\n        case \"enter\":\r\n          if (this.replaySelected) {\r\n            this.scene.start(\"Game\");\r\n          } else {\r\n            this.scene.start(\"Menu\");\r\n          }\r\n          break;\r\n      }\r\n    });\r\n  }\r\n\r\n  private renderImage = (imageStr: Images, tweenImage: boolean) => {\r\n    const image = this.add.image(GAME_WIDTH / 2, GAME_HEIGHT / 2, imageStr);\r\n    if (tweenImage) {\r\n      this.tweens.add({\r\n        targets: image,\r\n        repeat: -1,\r\n        y: { from: GAME_HEIGHT / 2, to: GAME_HEIGHT / 2 - 10 },\r\n        yoyo: true\r\n      });\r\n      this.tweens.add({\r\n        targets: image,\r\n        duration: 2000,\r\n        alpha: { from: 0.2, to: 1 },\r\n        repeat: -1,\r\n        yoyo: true\r\n      });\r\n    }\r\n  };\r\n\r\n  private renderText = (text: string) => {\r\n    const textStartY = GAME_HEIGHT / 6;\r\n\r\n    this.add.text(0, textStartY, text, {\r\n      fontFamily: FONT,\r\n      fontSize: FONT_SIZE * 1.5,\r\n      align: \"center\",\r\n      fixedWidth: GAME_WIDTH,\r\n      color: StringColours.PINK\r\n    });\r\n    this.add.text(\r\n      0,\r\n      textStartY + CELL_SIZE * 2,\r\n      `score: ${window.scene.scoreBoard.score}`,\r\n      {\r\n        ...FONT_CONFIG,\r\n        align: \"center\",\r\n        fixedWidth: GAME_WIDTH\r\n      }\r\n    );\r\n  };\r\n\r\n  public update() {}\r\n}\r\n","import { GAME_WIDTH, GAME_HEIGHT } from \"../constants/game\";\r\n\r\nimport { Menu } from \"./scene/Menu\";\r\nimport { PlayScene } from \"./scene/PlayScene\";\r\nimport { End } from \"./scene/End\";\r\n\r\nconst config: Phaser.Types.Core.GameConfig = {\r\n  type: Phaser.AUTO,\r\n  width: GAME_WIDTH,\r\n  height: GAME_HEIGHT,\r\n  physics: {\r\n    default: \"arcade\",\r\n    arcade: {\r\n      gravity: { y: 200 }\r\n    }\r\n  },\r\n  scene: Menu\r\n};\r\n\r\nvar game: Phaser.Game;\r\n\r\nexport const initGame = () => {\r\n  game = new Phaser.Game(config);\r\n  game.scene.add(\"Game\", PlayScene);\r\n  game.scene.add(\"End\", End);\r\n};\r\n"],"sourceRoot":""}